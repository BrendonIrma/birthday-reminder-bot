import moment from 'moment';

export class MessageParser {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è moment.js
        moment.locale('ru');
    }

    parseMessage(text) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if (text.length > 1000) {
                return {
                    error: '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤).'
                };
            }

            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            const cleanText = text.trim();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            const result = this.smartParse(cleanText);
            
            if (result.error) {
                return result;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const validationResult = this.validateAndCleanData(result);
            if (validationResult.error) {
                return validationResult;
            }

            return validationResult;

        } catch (error) {
            console.error('Error parsing message:', error);
            return {
                error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
            };
        }
    }

    smartParse(text) {
        try {
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∑–∞–ø—è—Ç—ã–º, —Ç–æ—á–∫–∞–º, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–∞–º
            const parts = text.split(/[,.!?;]/).map(part => part.trim()).filter(part => part.length > 0);
            
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
            if (parts.length === 1) {
                const words = text.split(/\s+/);
                if (words.length >= 2) {
                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –≤ —Å–ª–æ–≤–∞—Ö
                    const dateIndex = this.findDateInWords(words);
                    if (dateIndex !== -1) {
                        let name = words.slice(0, dateIndex).join(' ');
                        let dateStr = words[dateIndex];
                        let info = words.slice(dateIndex + 1).join(' ');
                        
                        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15 –º–∞—Ä—Ç–∞")
                        if (dateIndex < words.length - 1 && this.isDatePart(words[dateIndex] + ' ' + words[dateIndex + 1])) {
                            dateStr = words[dateIndex] + ' ' + words[dateIndex + 1];
                            info = words.slice(dateIndex + 2).join(' ');
                        }
                        
                        // –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ (–¥–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ), –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –¥–∞—Ç—ã
                        if (!name && info) {
                            const infoWords = info.split(/\s+/);
                            if (infoWords.length > 0) {
                                name = infoWords[0];
                                info = infoWords.slice(1).join(' ');
                            }
                        }
                        
                        return {
                            name: name,
                            dateStr: dateStr,
                            info: info
                        };
                    }
                }
            }

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            let name = '';
            let dateStr = '';
            let info = '';

            for (let i = 0; i < parts.length; i++) {
                const part = parts[i];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å –¥–∞—Ç–æ–π
                if (this.isDatePart(part)) {
                    if (!dateStr) {
                        dateStr = part;
                    }
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–µ–º (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
                else if (!name && this.isNamePart(part)) {
                    name = part;
                }
                // –û—Å—Ç–∞–ª—å–Ω–æ–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                else {
                    if (info) {
                        info += ', ' + part;
                    } else {
                        info = part;
                    }
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞—Ç—É –≤ —á–∞—Å—Ç—è—Ö, –∏—â–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            if (!dateStr) {
                const dateMatch = this.findDateInText(text);
                if (dateMatch) {
                    dateStr = dateMatch;
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è, –∏—â–µ–º –µ–≥–æ –≤ —á–∞—Å—Ç—è—Ö
            if (!name) {
                for (let i = 0; i < parts.length; i++) {
                    const part = parts[i];
                    if (!this.isDatePart(part) && this.isNamePart(part)) {
                        name = part;
                        break;
                    }
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è, –∏—â–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            if (!name) {
                const words = text.split(/\s+/);
                for (let i = 0; i < words.length; i++) {
                    const word = words[i];
                    if (!this.isDatePart(word) && this.isNamePart(word)) {
                        name = word;
                        break;
                    }
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–æ–π
            if (!name) {
                const words = text.split(/\s+/);
                for (let i = 0; i < words.length; i++) {
                    const word = words[i];
                    if (!this.isDatePart(word) && word.length > 0) {
                        name = word;
                        break;
                    }
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –¥–∞—Ç—ã
            if (!name && dateStr) {
                const words = text.split(/\s+/);
                const dateIndex = words.findIndex(word => word === dateStr || word.includes(dateStr));
                if (dateIndex !== -1) {
                    for (let i = dateIndex + 1; i < words.length; i++) {
                        const word = words[i];
                        if (!this.isDatePart(word) && word.length > 0) {
                            name = word;
                            break;
                        }
                    }
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–æ–π
            if (!name) {
                const words = text.split(/\s+/);
                for (let i = 0; i < words.length; i++) {
                    const word = words[i];
                    if (!this.isDatePart(word) && word.length > 0) {
                        name = word;
                        break;
                    }
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–µ—Ä–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏
            if (!info && parts.length > 1) {
                const remainingParts = parts.slice(1).filter(part => part !== dateStr);
                info = remainingParts.join(', ');
            }

            if (!name) {
                return {
                    error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.'
                };
            }

            if (!dateStr) {
                return {
                    error: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\nüìÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:\n‚Ä¢ 15.03.1990 –∏–ª–∏ 15.03\n‚Ä¢ 3 –º–∞—Ä—Ç–∞ –∏–ª–∏ 3 –º–∞—Ä—Ç–∞ 1990\n‚Ä¢ 15/03/1990 –∏–ª–∏ 15-03-1990\n‚Ä¢ 03.15.1990 (–º–µ—Å—è—Ü.–¥–µ–Ω—å.–≥–æ–¥)'
                };
            }

            return {
                name: name,
                dateStr: dateStr,
                info: info
            };

        } catch (error) {
            console.error('Error in smartParse:', error);
            return {
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
            };
        }
    }

    isDatePart(part) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        if (/\d{1,2}[.\-/]\d{1,2}([.\-/]\d{2,4})?/.test(part)) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', 
                       '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è',
                       '—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫',
                       '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'];
        
        // –ü–æ—Ä—è–¥–∫–æ–≤—ã–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ
        const ordinals = ['–ø–µ—Ä–≤–æ–≥–æ', '–≤—Ç–æ—Ä–æ–≥–æ', '—Ç—Ä–µ—Ç—å–µ–≥–æ', '—á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ', '–ø—è—Ç–æ–≥–æ', '—à–µ—Å—Ç–æ–≥–æ', '—Å–µ–¥—å–º–æ–≥–æ', '–≤–æ—Å—å–º–æ–≥–æ', '–¥–µ–≤—è—Ç–æ–≥–æ', '–¥–µ—Å—è—Ç–æ–≥–æ',
                         '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ',
                         '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–≥–æ', '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–≥–æ', '—Ç—Ä–∏–¥—Ü–∞—Ç–æ–≥–æ', '—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ'];
        
        const lowerPart = part.toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —á–∞—Å—Ç—å –º–µ—Å—è—Ü
        const hasMonth = months.some(month => lowerPart.includes(month));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —á–∞—Å—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤–æ–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ
        const hasOrdinal = ordinals.some(ordinal => lowerPart.includes(ordinal));
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—è—Ü, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º —á–∏—Å–ª–æ –∏–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤–æ–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ
        if (hasMonth) {
            // –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Ç–æ–π –∂–µ —á–∞—Å—Ç–∏
            const numberMatch = part.match(/\d+/);
            if (numberMatch) {
                return true;
            }
            
            // –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ —Å –º–µ—Å—è—Ü–µ–º
            const words = part.split(/\s+/);
            if (words.length === 1 && months.some(month => lowerPart === month)) {
                return false; // –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ - –Ω–µ –¥–∞—Ç–∞
            }
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤–æ–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º –º–µ—Å—è—Ü
        if (hasOrdinal) {
            // –ò—â–µ–º –º–µ—Å—è—Ü –≤ —Ç–æ–π –∂–µ —á–∞—Å—Ç–∏
            const monthMatch = months.some(month => lowerPart.includes(month));
            if (monthMatch) {
                return true;
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Å—è—Ü, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–æ–π
        if (hasMonth) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            const words = part.split(/\s+/);
            if (words.length === 1) {
                // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
                const exactMonth = months.some(month => lowerPart === month);
                if (!exactMonth) {
                    return false; // –≠—Ç–æ –Ω–µ –¥–∞—Ç–∞, –∞ —Å–ª–æ–≤–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
                }
            } else {
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–∞—Ç–∞
                // –ù–∞–ø—Ä–∏–º–µ—Ä, "15 –º–∞—Ä—Ç–∞" - –¥–∞—Ç–∞, "–º–æ—è –ª—é–±–∏–º–∞—è" - –Ω–µ –¥–∞—Ç–∞
                const hasNumber = /\d+/.test(part);
                if (!hasNumber && !hasOrdinal) {
                    return false; // –ù–µ—Ç —á–∏—Å–ª–∞ –∏ –Ω–µ—Ç –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ - –Ω–µ –¥–∞—Ç–∞
                }
            }
        }
        
        return hasMonth || hasOrdinal;
    }

    isNamePart(part) {
        // –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ –Ω–µ –±—ã—Ç—å –¥–∞—Ç–æ–π
        if (this.isDatePart(part)) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã (—Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ)
        if (!/[–∞-—è—ëa-z]/i.test(part)) {
            return false;
        }
        
        // –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º
        if (part.length > 50) {
            return false;
        }
        
        // –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        if (/^\d+$/.test(part)) {
            return false;
        }
        
        return true;
    }

    findDateInWords(words) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        for (let i = 0; i < words.length; i++) {
            if (/\d{1,2}[.\-/]\d{1,2}([.\-/]\d{2,4})?/.test(words[i])) {
                return i;
            }
        }
        
        // –ó–∞—Ç–µ–º –∏—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (—á–∏—Å–ª–æ + –º–µ—Å—è—Ü –∏–ª–∏ –º–µ—Å—è—Ü + —á–∏—Å–ª–æ)
        for (let i = 0; i < words.length - 1; i++) {
            const currentWord = words[i];
            const nextWord = words[i + 1];
            const combined = currentWord + ' ' + nextWord;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º "15 –º–∞—Ä—Ç–∞" –∏–ª–∏ "–º–∞—Ä—Ç–∞ 15"
            if (this.isDatePart(combined)) {
                return i;
            }
        }
        
        return -1;
    }

    findDateInText(text) {
        // –ò—â–µ–º –¥–∞—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        const datePatterns = [
            // –ß–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            /\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4}/g,
            /\d{1,2}[.\-/]\d{1,2}/g,
            // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å —á–∏—Å–ª–æ–º –∏ –º–µ—Å—è—Ü–µ–º
            /\d+\s+[–∞-—è—ë]+/gi,
            /[–∞-—è—ë]+\s+\d+/gi
        ];
        
        for (const pattern of datePatterns) {
            const matches = text.match(pattern);
            if (matches) {
                for (const match of matches) {
                    if (this.isDatePart(match)) {
                        return match;
                    }
                }
            }
        }
        
        return null;
    }

    validateAndCleanData(data) {
        try {
            // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            let name = data.name.trim().replace(/[^\w\s\u0400-\u04FF]/g, '');
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç ReDoS –∞—Ç–∞–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            if (/(.)\1{50,}/.test(name)) {
                return {
                    error: '‚ùå –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤.'
                };
            }

            if (!name) {
                return {
                    error: '–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
                };
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
            if (name.length > 100) {
                return {
                    error: '‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).'
                };
            }

            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            const parsedDate = this.parseDate(data.dateStr);
            if (!parsedDate) {
                return {
                    error: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\nüìÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n‚Ä¢ 15.03.1990 –∏–ª–∏ 15.03\n‚Ä¢ 3 –º–∞—Ä—Ç–∞ –∏–ª–∏ 3 –º–∞—Ä—Ç–∞ 1990\n‚Ä¢ 15/03/1990 –∏–ª–∏ 15-03-1990\n‚Ä¢ 03.15.1990 (–º–µ—Å—è—Ü.–¥–µ–Ω—å.–≥–æ–¥)\n\nüîç –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞: /format'
                };
            }

            // –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            let info = data.info ? data.info.trim() : '';
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç ReDoS –∞—Ç–∞–∫ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if (/(.)\1{50,}/.test(info)) {
                return {
                    error: '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤.'
                };
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if (info.length > 500) {
                return {
                    error: '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).'
                };
            }

            return {
                name: name,
                date: parsedDate.format('YYYY-MM-DD'),
                info: info || null,
                originalDate: parsedDate.format('DD.MM.YYYY')
            };

        } catch (error) {
            console.error('Error validating data:', error);
            return {
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
            };
        }
    }

    parseDate(dateStr) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            let parsedDate = this.parseTextDate(dateStr);
            if (parsedDate) {
                return parsedDate;
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            const normalizedDate = dateStr.replace(/[.\-/]/g, '.');
            
            // –†–∞–∑–ª–∏—á–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            const formats = [
                'DD.MM.YYYY',
                'DD.MM.YY',
                'D.M.YYYY',
                'D.M.YY',
                'DD.MM',
                'D.M',
                'MM.DD.YYYY',
                'MM.DD.YY',
                'M.D.YYYY',
                'M.D.YY',
                'MM.DD',
                'M.D',
                'YYYY.MM.DD',
                'YY.MM.DD',
                'YYYY.M.D',
                'YY.M.D',
                'MM.DD.YYYY',
                'M.D.YYYY'
            ];

            // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–æ—Ä–º–∞—Ç
            for (const format of formats) {
                parsedDate = moment(normalizedDate, format, true);
                if (parsedDate.isValid()) {
                    // –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                    if ((format.includes('DD.MM') || format.includes('D.M') || 
                         format.includes('MM.DD') || format.includes('M.D')) && 
                        !format.includes('YYYY') && !format.includes('YY')) {
                        const currentYear = moment().year();
                        if (format.includes('DD.MM') || format.includes('D.M')) {
                            parsedDate = moment(normalizedDate + '.' + currentYear, 'DD.MM.YYYY', true);
                            if (!parsedDate.isValid()) {
                                parsedDate = moment(normalizedDate + '.' + currentYear, 'D.M.YYYY', true);
                            }
                        } else {
                            parsedDate = moment(normalizedDate + '.' + currentYear, 'MM.DD.YYYY', true);
                            if (!parsedDate.isValid()) {
                                parsedDate = moment(normalizedDate + '.' + currentYear, 'M.D.YYYY', true);
                            }
                        }
                    }
                    break;
                }
            }

            if (!parsedDate || !parsedDate.isValid()) {
                return null;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –¥–∞—Ç—ã (–Ω–µ —Ä–∞–Ω—å—à–µ 1900 –≥–æ–¥–∞ –∏ –Ω–µ –ø–æ–∑–∂–µ 2100)
            if (parsedDate.year() < 1900 || parsedDate.year() > 2100) {
                return null;
            }

            return parsedDate;

        } catch (error) {
            console.error('Error parsing date:', error);
            return null;
        }
    }

    parseTextDate(dateStr) {
        try {
            const text = dateStr.toLowerCase().trim();
            
            // –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
            const months = {
                '—è–Ω–≤–∞—Ä—è': 1, '—è–Ω–≤': 1, '—è–Ω–≤–∞—Ä—å': 1,
                '—Ñ–µ–≤—Ä–∞–ª—è': 2, '—Ñ–µ–≤': 2, '—Ñ–µ–≤—Ä–∞–ª—å': 2,
                '–º–∞—Ä—Ç–∞': 3, '–º–∞—Ä': 3, '–º–∞—Ä—Ç': 3,
                '–∞–ø—Ä–µ–ª—è': 4, '–∞–ø—Ä': 4, '–∞–ø—Ä–µ–ª—å': 4,
                '–º–∞—è': 5, '–º–∞–π': 5,
                '–∏—é–Ω—è': 6, '–∏—é–Ω': 6, '–∏—é–Ω—å': 6,
                '–∏—é–ª—è': 7, '–∏—é–ª': 7, '–∏—é–ª—å': 7,
                '–∞–≤–≥—É—Å—Ç–∞': 8, '–∞–≤–≥': 8, '–∞–≤–≥—É—Å—Ç': 8,
                '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '—Å–µ–Ω': 9, '—Å–µ–Ω—Ç—è–±—Ä—å': 9,
                '–æ–∫—Ç—è–±—Ä—è': 10, '–æ–∫—Ç': 10, '–æ–∫—Ç—è–±—Ä—å': 10,
                '–Ω–æ—è–±—Ä—è': 11, '–Ω–æ—è': 11, '–Ω–æ—è–±—Ä—å': 11,
                '–¥–µ–∫–∞–±—Ä—è': 12, '–¥–µ–∫': 12, '–¥–µ–∫–∞–±—Ä—å': 12
            };

            // –°–ª–æ–≤–∞—Ä—å –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
            const ordinals = {
                '–ø–µ—Ä–≤–æ–≥–æ': 1, '–≤—Ç–æ—Ä–æ–≥–æ': 2, '—Ç—Ä–µ—Ç—å–µ–≥–æ': 3, '—á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ': 4, '–ø—è—Ç–æ–≥–æ': 5,
                '—à–µ—Å—Ç–æ–≥–æ': 6, '—Å–µ–¥—å–º–æ–≥–æ': 7, '–≤–æ—Å—å–º–æ–≥–æ': 8, '–¥–µ–≤—è—Ç–æ–≥–æ': 9, '–¥–µ—Å—è—Ç–æ–≥–æ': 10,
                '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 11, '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 12, '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 13, '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 14, '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 15,
                '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 16, '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 17, '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 18, '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ': 19, '–¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ': 20,
                '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ': 21, '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ': 22, '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ–≥–æ': 23, '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ': 24, '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–≥–æ': 25,
                '–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–≥–æ': 26, '–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–≥–æ': 27, '–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–≥–æ': 28, '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–≥–æ': 29, '—Ç—Ä–∏–¥—Ü–∞—Ç–æ–≥–æ': 30,
                '—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ': 31
            };

            // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞—Ç
            const patterns = [
                // "3 –º–∞—Ä—Ç–∞", "15 –º–∞—è", "1 —è–Ω–≤–∞—Ä—è"
                /^(\d{1,2})\s+([–∞-—è—ë]+)$/,
                // "3 –º–∞—Ä—Ç–∞ 1990", "15 –º–∞—è 2000"
                /^(\d{1,2})\s+([–∞-—è—ë]+)\s+(\d{4})$/,
                // "–º–∞—Ä—Ç–∞ 3", "–º–∞—è 15"
                /^([–∞-—è—ë]+)\s+(\d{1,2})$/,
                // "–º–∞—Ä—Ç–∞ 3 1990", "–º–∞—è 15 2000"
                /^([–∞-—è—ë]+)\s+(\d{1,2})\s+(\d{4})$/,
                // "—Ç—Ä–µ—Ç—å–µ–≥–æ –º–∞—Ä—Ç–∞", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –º–∞—è"
                /^([–∞-—è—ë\s]+)\s+([–∞-—è—ë]+)$/,
                // "—Ç—Ä–µ—Ç—å–µ–≥–æ –º–∞—Ä—Ç–∞ 1990", "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –º–∞—è 2000"
                /^([–∞-—è—ë\s]+)\s+([–∞-—è—ë]+)\s+(\d{4})$/
            ];

            for (let i = 0; i < patterns.length; i++) {
                const pattern = patterns[i];
                const match = text.match(pattern);
                if (match) {
                    let day, month, year;
                    
                    if (i === 0 || i === 1) {
                        // "3 –º–∞—Ä—Ç–∞" –∏–ª–∏ "3 –º–∞—Ä—Ç–∞ 1990"
                        day = parseInt(match[1]);
                        const monthName = match[2];
                        month = months[monthName];
                        year = match[3] ? parseInt(match[3]) : moment().year();
                    } else if (i === 2 || i === 3) {
                        // "–º–∞—Ä—Ç–∞ 3" –∏–ª–∏ "–º–∞—Ä—Ç–∞ 3 1990"
                        const monthName = match[1];
                        month = months[monthName];
                        day = parseInt(match[2]);
                        year = match[3] ? parseInt(match[3]) : moment().year();
                    } else if (i === 4 || i === 5) {
                        // "—Ç—Ä–µ—Ç—å–µ–≥–æ –º–∞—Ä—Ç–∞" –∏–ª–∏ "—Ç—Ä–µ—Ç—å–µ–≥–æ –º–∞—Ä—Ç–∞ 1990"
                        const dayName = match[1].trim();
                        const monthName = match[2];
                        day = ordinals[dayName];
                        month = months[monthName];
                        year = match[3] ? parseInt(match[3]) : moment().year();
                    }

                    if (month && day >= 1 && day <= 31) {
                        const parsedDate = moment(`${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);
                        if (parsedDate.isValid() && 
                            parsedDate.date() === day && 
                            parsedDate.month() + 1 === month && 
                            parsedDate.year() === year) {
                            return parsedDate;
                        }
                    }
                }
            }

            return null;

        } catch (error) {
            console.error('Error parsing text date:', error);
            return null;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
    isValidDate(day, month, year) {
        try {
            const date = moment(`${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`);
            return date.isValid() && 
                   date.date() === day && 
                   date.month() + 1 === month && 
                   date.year() === year;
        } catch (error) {
            return false;
        }
    }
}
export class AIAssistant {
    constructor() {
        this.apiKey = process.env.DEEPSEEK_API_KEY;
        this.apiUrl = 'https://api.deepseek.com/v1/chat/completions';
    }

    async generateCongratulations(name, info = '') {
        try {
            if (!this.apiKey) {
                return this.getDefaultCongratulations(name);
            }

            const prompt = this.buildCongratulationsPrompt(name, info);
            
            const response = await this.callDeepSeek(prompt, "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.");

            return this.truncateText(response, 100);

        } catch (error) {
            console.error('Error generating congratulations:', error);
            return this.getDefaultCongratulations(name);
        }
    }

    async generateGiftIdea(name, info = '') {
        try {
            if (!this.apiKey) {
                return this.getDefaultGiftIdea(name);
            }

            const prompt = this.buildGiftIdeaPrompt(name, info);
            
            const response = await this.callDeepSeek(prompt, "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –ü—Ä–µ–¥–ª–æ–∂–∏ 1 –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.");

            return this.truncateText(response, 100);

        } catch (error) {
            console.error('Error generating gift idea:', error);
            return this.getDefaultGiftIdea(name);
        }
    }

    async generateMultipleGiftIdeas(name, info = '', count = 3) {
        try {
            if (!this.apiKey) {
                return this.getDefaultMultipleGiftIdeas(name, count);
            }

            const prompt = this.buildMultipleGiftIdeasPrompt(name, info, count);
            
            const response = await this.callDeepSeek(prompt, `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –ü—Ä–µ–¥–ª–æ–∂–∏ ${count} —Ä–∞–∑–Ω—ã—Ö –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤. –ö–∞–∂–¥–∞—è –∏–¥–µ—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å —ç–º–æ–¥–∑–∏. –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤.`);

            return this.formatMultipleGiftIdeas(response, count);

        } catch (error) {
            console.error('Error generating multiple gift ideas:', error);
            return this.getDefaultMultipleGiftIdeas(name, count);
        }
    }

    async callDeepSeek(prompt, systemMessage) {
        try {
            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: 'deepseek-chat',
                    messages: [
                        { role: 'system', content: systemMessage },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.3,
                    max_tokens: 200
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data.choices[0].message.content.trim();
        } catch (error) {
            console.error('DeepSeek API error:', error);
            throw error;
        }
    }

    truncateText(text, maxLength) {
        if (text.length <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + '...';
    }

    buildCongratulationsPrompt(name, info) {
        let prompt = `–°–æ–∑–¥–∞–π —Ç–µ–ø–ª–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è ${name}.`;
        
        if (info) {
            prompt += ` –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${info}.`;
        }
        
        prompt += ` –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;
        
        return prompt;
    }

    buildGiftIdeaPrompt(name, info) {
        let prompt = `–ü—Ä–µ–¥–ª–æ–∂–∏ 1 –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è ${name}.`;
        
        if (info) {
            prompt += ` –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${info}.`;
        }
        
        prompt += ` –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;
        
        return prompt;
    }

    buildMultipleGiftIdeasPrompt(name, info, count) {
        let prompt = `–ü—Ä–µ–¥–ª–æ–∂–∏ ${count} —Ä–∞–∑–Ω—ã—Ö –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è ${name}.`;
        
        if (info) {
            prompt += ` –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${info}.`;
        }
        
        prompt += ` –ö–∞–∂–¥–∞—è –∏–¥–µ—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å —ç–º–æ–¥–∑–∏. –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;
        
        return prompt;
    }

    formatMultipleGiftIdeas(response, count) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        const lines = response.split('\n').filter(line => line.trim());
        const formattedIdeas = lines.slice(0, count).map((line, index) => {
            const cleanLine = line.trim();
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (!/^[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/u.test(cleanLine)) {
                const giftEmojis = ['üéÅ', 'üéÇ', 'üéà', 'üå∏', 'üìö', 'üéµ', 'üè†', '‚òï', 'üç´', 'üé®'];
                return `${giftEmojis[index % giftEmojis.length]} ${cleanLine}`;
            }
            return cleanLine;
        });
        
        return formattedIdeas.join('\n');
    }

    getDefaultCongratulations(name) {
        const congratulations = [
            `üéâ ${name}, —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ó–¥–æ—Ä–æ–≤—å—è, —Å—á–∞—Å—Ç—å—è –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—á—Ç–∞–Ω–∏–π! üéÇ`,
            `üéà ${name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü—É—Å—Ç—å –≥–æ–¥ –±—É–¥–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ —É—Å–ø–µ—à–Ω—ã–º! üéÅ`,
            `üåü ${name}, —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –†–∞–¥–æ—Å—Ç–∏, –ª—é–±–≤–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! ‚ú®`
        ];
        
        return congratulations[Math.floor(Math.random() * congratulations.length)];
    }

    getDefaultGiftIdea(name) {
        const giftIdeas = [
            `üéÅ –ö–Ω–∏–≥–∞ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è ${name}`,
            `üå∏ –¶–≤–µ—Ç—ã - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è ${name}`,
            `üç∞ –¢–æ—Ä—Ç - —Å–ª–∞–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è ${name}`,
            `üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è ${name}`,
            `üè† –î–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä –¥–ª—è ${name}`
        ];
        
        return giftIdeas[Math.floor(Math.random() * giftIdeas.length)];
    }

    getDefaultMultipleGiftIdeas(name, count = 3) {
        const allGiftIdeas = [
            `üéÅ –ö–Ω–∏–≥–∞ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫`,
            `üå∏ –¶–≤–µ—Ç—ã - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫`,
            `üç∞ –¢–æ—Ä—Ç - —Å–ª–∞–¥–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫`,
            `üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫`,
            `üè† –î–æ–º–∞—à–Ω–∏–π –¥–µ–∫–æ—Ä`,
            `‚òï –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –∫–∞—Ñ–µ`,
            `üé® –ù–∞–±–æ—Ä –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞`,
            `üç´ –®–æ–∫–æ–ª–∞–¥–Ω—ã–π –Ω–∞–±–æ—Ä`,
            `üì± –ê–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞`,
            `üß∏ –ú—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞`,
            `üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞`,
            `üëï –û–¥–µ–∂–¥–∞`,
            `üèÉ‚Äç‚ôÄÔ∏è –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã`,
            `üéÆ –ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è`,
            `üå± –ö–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ`
        ];
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const shuffled = allGiftIdeas.sort(() => 0.5 - Math.random());
        return shuffled.slice(0, count).join('\n');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
    async generatePersonalizedMessage(name, info, messageType = 'congratulations') {
        try {
            if (!this.apiKey) {
                return messageType === 'congratulations' 
                    ? this.getDefaultCongratulations(name)
                    : this.getDefaultGiftIdea(name);
            }

            const systemPrompt = messageType === 'congratulations' 
                ? "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
                : "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º. –ü—Ä–µ–¥–ª–æ–∂–∏ 1 –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.";

            const userPrompt = messageType === 'congratulations'
                ? this.buildCongratulationsPrompt(name, info)
                : this.buildGiftIdeaPrompt(name, info);

            const response = await this.callDeepSeek(userPrompt, systemPrompt);

            return this.truncateText(response, 100);

        } catch (error) {
            console.error(`Error generating ${messageType}:`, error);
            return messageType === 'congratulations' 
                ? this.getDefaultCongratulations(name)
                : this.getDefaultGiftIdea(name);
        }
    }
}
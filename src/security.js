/**
 * –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Birthday Bot
 * –°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
 */
export class SecurityUtils {
    constructor() {
        this.blockedUsers = new Set(); // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        this.suspiciousPatterns = [
            // XSS –∞—Ç–∞–∫–∏
            /<script[^>]*>.*?<\/script>/gi,
            /javascript:/gi,
            /on\w+\s*=/gi,
            /eval\s*\(/gi,
            /function\s*\(/gi,
            
            // SQL injection (—Ö–æ—Ç—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase)
            /(\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\b)/gi,
            
            // Command injection
            /[;&|`$(){}[\]]/g,
            
            // Path traversal
            /\.\.\//g,
            /\.\.\\/g,
            
            // ReDoS –∞—Ç–∞–∫–∏
            /(.)\1{100,}/g,
            
            // –°–ø–∞–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            /(.)\1{20,}/g,
            /(.)\1{10,}(.)\2{10,}/g
        ];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    isUserBlocked(chatId) {
        return this.blockedUsers.has(chatId);
    }

    /**
     * –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    blockUser(chatId, reason = '') {
        this.blockedUsers.add(chatId);
        console.log(`üö´ User ${chatId} blocked. Reason: ${reason}`);
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    unblockUser(chatId) {
        this.blockedUsers.delete(chatId);
        console.log(`‚úÖ User ${chatId} unblocked`);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
     */
    checkSuspiciousPatterns(text) {
        for (const pattern of this.suspiciousPatterns) {
            if (pattern.test(text)) {
                return {
                    suspicious: true,
                    pattern: pattern.toString(),
                    match: text.match(pattern)?.[0] || ''
                };
            }
        }
        return { suspicious: false };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º
     */
    isSpam(text) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        const repeatedChars = /(.)\1{20,}/;
        if (repeatedChars.test(text)) {
            return { isSpam: true, reason: 'repeated_characters' };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
        const words = text.toLowerCase().split(/\s+/);
        const wordCount = {};
        for (const word of words) {
            wordCount[word] = (wordCount[word] || 0) + 1;
            if (wordCount[word] > 10) {
                return { isSpam: true, reason: 'repeated_words' };
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
        const emojiCount = (text.match(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu) || []).length;
        if (emojiCount > 20) {
            return { isSpam: true, reason: 'too_many_emojis' };
        }

        return { isSpam: false };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
     */
    isValidDate(dateString) {
        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            const year = date.getFullYear();
            if (year < 1900 || year > 2100) {
                return false;
            }
            
            return true;
        } catch (error) {
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
     */
    isValidName(name) {
        if (!name || typeof name !== 'string') {
            return false;
        }
        
        // –î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏
        if (name.length < 1 || name.length > 100) {
            return false;
        }
        
        // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
        if (!/^[a-zA-Z–∞-—è—ë–ê-–Ø–Å0-9\s]+$/.test(name)) {
            return false;
        }
        
        // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤
        if (!name.trim()) {
            return false;
        }
        
        return true;
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
     */
    sanitizeText(text) {
        if (typeof text !== 'string') {
            return '';
        }
        
        return text
            .replace(/[<>\"'&]/g, '') // HTML/XML —Å–∏–º–≤–æ–ª—ã
            .replace(/[;&|`$(){}[\]]/g, '') // Command injection —Å–∏–º–≤–æ–ª—ã
            .replace(/\.\.\//g, '') // Path traversal
            .replace(/\.\.\\/g, '') // Path traversal (Windows)
            .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤
            .trim()
            .substring(0, 1000); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
     */
    generateSafeCallbackId() {
        return Math.random().toString(36).substring(2, 15) + 
               Math.random().toString(36).substring(2, 15);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback ID
     */
    isValidCallbackId(id) {
        return typeof id === 'string' && /^[a-z0-9]{26}$/.test(id);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
     */
    logSecurityEvent(chatId, username, eventType, details = {}) {
        const timestamp = new Date().toISOString();
        const logEntry = {
            timestamp,
            chatId,
            username,
            eventType,
            details,
            userAgent: 'BirthdayBot/1.0'
        };
        
        console.log(`üö® SECURITY EVENT [${timestamp}]`);
        console.log(`   Chat ID: ${chatId}`);
        console.log(`   Username: @${username || 'unknown'}`);
        console.log(`   Event: ${eventType}`);
        console.log(`   Details:`, details);
        console.log('---');
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        // –Ω–∞–ø—Ä–∏–º–µ—Ä, Sentry, DataDog, –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∞—Ç–∞–∫–æ–π
     */
    isAttack(text) {
        const suspicious = this.checkSuspiciousPatterns(text);
        if (suspicious.suspicious) {
            return { isAttack: true, type: 'suspicious_pattern', details: suspicious };
        }
        
        const spam = this.isSpam(text);
        if (spam.isSpam) {
            return { isAttack: true, type: 'spam', details: spam };
        }
        
        return { isAttack: false };
    }
}
import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';
import dotenv from 'dotenv';
import moment from 'moment';
import { SupabaseDatabase } from './database.js';
import { MessageParser } from './messageParser.js';
import { BirthdayReminder } from './birthdayReminder.js';
import { AIAssistant } from './aiAssistant.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class BirthdayBot {
    constructor() {
        this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
        this.db = new SupabaseDatabase();
        this.messageParser = new MessageParser();
        this.birthdayReminder = new BirthdayReminder(this.bot, this.db);
        this.aiAssistant = new AIAssistant();
        
        this.setupHandlers();
        this.setupCronJobs();
    }

    setupHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', async (msg) => {
            if (msg.text) {
                await this.handleMessage(msg);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ"

–ù–∞–ø—Ä–∏–º–µ—Ä:
"–ê–Ω–Ω–∞, 3 –º–∞—Ä—Ç–∞, –º–æ—è —Å–µ—Å—Ç—Ä–∞, –ª—é–±–∏—Ç –∫–Ω–∏–≥–∏"
"–ü–µ—Ç—Ä, 15.05.1990, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∏–¥–µ–∏ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅ
            `;
            await this.bot.sendMessage(chatId, welcomeMessage);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
        this.bot.onText(/\/list/, async (msg) => {
            const chatId = msg.chat.id;
            await this.showBirthdayList(chatId);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        this.bot.onText(/\/help/, async (msg) => {
            const chatId = msg.chat.id;
            const helpMessage = `
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞"
‚Ä¢ "–ü–µ—Ç—Ä, 03.07.1992, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
‚Ä¢ "–ï–ª–µ–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ø–æ–¥—Ä—É–≥–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã"

üìÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:
‚Ä¢ 15.03.1990 (—á–∏—Å–ª–æ–≤–æ–π)
‚Ä¢ 3 –º–∞—Ä—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
‚Ä¢ 15 –º–∞—è 1990
‚Ä¢ –º–∞—Ä—Ç–∞ 3
            `;
            await this.bot.sendMessage(chatId, helpMessage);
        });
    }

    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (text.startsWith('/')) {
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.checkTodayBirthdays(chatId);

        try {
            const parsedData = this.messageParser.parseMessage(text);
            
            if (parsedData.error) {
                await this.bot.sendMessage(chatId, `‚ùå ${parsedData.error}`);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const birthdayId = await this.db.addBirthday(
                chatId,
                parsedData.name,
                parsedData.date,
                parsedData.info
            );

            if (birthdayId) {
                const confirmationMessage = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${parsedData.name} (${parsedData.originalDate}). –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º! üéÇ`;
                await this.bot.sendMessage(chatId, confirmationMessage);
            } else {
                await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
            }

        } catch (error) {
            console.error('Error handling message:', error);
            await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    }

    async checkTodayBirthdays(chatId) {
        try {
            const today = new Date();
            const month = today.getMonth() + 1;
            const day = today.getDate();

            console.log(`Checking today's birthdays for chat ${chatId}: ${day}.${month}`);

            const birthdays = await this.db.getBirthdaysByDate(month, day);
            
            if (birthdays.length === 0) {
                return; // –ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userBirthdays = birthdays.filter(birthday => birthday.chat_id === chatId);
            
            if (userBirthdays.length === 0) {
                return; // –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            }

            console.log(`Found ${userBirthdays.length} birthdays today for chat ${chatId}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
            for (const birthday of userBirthdays) {
                await this.sendInstantBirthdayMessage(chatId, birthday);
            }

        } catch (error) {
            console.error('Error checking today birthdays:', error);
        }
    }

    async sendInstantBirthdayMessage(chatId, birthday) {
        try {
            const name = birthday.name;
            const info = birthday.info || '';

            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è
            const birthdayMessage = `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${name}!`;
            await this.bot.sendMessage(chatId, birthdayMessage);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
            const congratulations = await this.aiAssistant.generateCongratulations(name, info);
            if (congratulations) {
                await this.bot.sendMessage(chatId, `üíå –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n${congratulations}`);
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞
            const giftIdea = await this.aiAssistant.generateGiftIdea(name, info);
            if (giftIdea) {
                await this.bot.sendMessage(chatId, `üéÅ –ò–¥–µ—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:\n\n${giftIdea}`);
            }

        } catch (error) {
            console.error('Error sending instant birthday message:', error);
        }
    }

    async showBirthdayList(chatId) {
        try {
            const birthdays = await this.db.getBirthdaysByChatId(chatId);
            
            if (birthdays.length === 0) {
                await this.bot.sendMessage(chatId, 'üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.');
                return;
            }

            let message = 'üìÖ –í–∞—à–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n';
            birthdays.forEach((birthday, index) => {
                const nextBirthday = this.birthdayReminder.getNextBirthday(birthday.birth_date);
                const daysUntil = this.birthdayReminder.getDaysUntilBirthday(nextBirthday);
                
                message += `${index + 1}. ${birthday.name} - ${birthday.birth_date}`;
                if (birthday.info) {
                    message += ` (${birthday.info})`;
                }
                message += `\n   üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${nextBirthday.format('DD.MM.YYYY')}`;
                message += `\n   ‚è∞ –ß–µ—Ä–µ–∑ ${daysUntil} –¥–Ω–µ–π\n\n`;
            });

            await this.bot.sendMessage(chatId, message);
        } catch (error) {
            console.error('Error showing birthday list:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.');
        }
    }

    setupCronJobs() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
        cron.schedule('0 9 * * *', async () => {
            console.log('Checking for birthdays...');
            await this.birthdayReminder.checkAndSendReminders();
        });

        console.log('Cron jobs set up successfully');
    }

    async start() {
        try {
            await this.db.init();
            console.log('Birthday Bot started successfully!');
        } catch (error) {
            console.error('Failed to start bot:', error);
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
const bot = new BirthdayBot();
bot.start();
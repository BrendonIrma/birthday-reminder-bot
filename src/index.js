import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';
import dotenv from 'dotenv';
import moment from 'moment';
import http from 'http';
import { SupabaseDatabase } from './database.js';
import { MessageParser } from './messageParser.js';
import { BirthdayReminder } from './birthdayReminder.js';
import { AIAssistant } from './aiAssistant.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class BirthdayBot {
    constructor() {
        this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
        this.db = new SupabaseDatabase();
        this.messageParser = new MessageParser();
        this.birthdayReminder = new BirthdayReminder(this.bot, this.db);
        this.aiAssistant = new AIAssistant();
        
        this.setupHandlers();
        this.setupCronJobs();
        this.setupHttpServer();
    }

    setupHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', async (msg) => {
            if (msg.text) {
                await this.handleMessage(msg);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        this.bot.onText(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è!

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ"

–ù–∞–ø—Ä–∏–º–µ—Ä:
"–ê–Ω–Ω–∞, 3 –º–∞—Ä—Ç–∞, –º–æ—è —Å–µ—Å—Ç—Ä–∞, –ª—é–±–∏—Ç –∫–Ω–∏–≥–∏"
"–ü–µ—Ç—Ä, 15.05.1990, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"

‚è∞ –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∏–¥–µ–∏ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø–æ–¥–∞—Ä–∫–æ–≤! üéÅ

üí° –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!
            `;
            
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üìã –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' },
                        { text: 'üìù –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' }
                    ],
                    [
                        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
                        { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'status' }
                    ],
                    [
                        { text: 'üß™ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'test_reminder' }
                    ]
                ]
            };
            
            await this.bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
        this.bot.onText(/\/list/, async (msg) => {
            const chatId = msg.chat.id;
            await this.showBirthdayList(chatId);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        this.bot.onText(/\/help/, async (msg) => {
            const chatId = msg.chat.id;
            const helpMessage = `
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
/format - –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞
/example - –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
/test_reminder - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞"
‚Ä¢ "–ü–µ—Ç—Ä, 03.07.1992, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
‚Ä¢ "–ï–ª–µ–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ø–æ–¥—Ä—É–≥–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã"

üìÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:
‚Ä¢ 15.03.1990 (—á–∏—Å–ª–æ–≤–æ–π)
‚Ä¢ 3 –º–∞—Ä—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
‚Ä¢ 15 –º–∞—è 1990
‚Ä¢ –º–∞—Ä—Ç–∞ 3

‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è, –º–æ—è –º–∞–º–∞"
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞"
            `;
            await this.bot.sendMessage(chatId, helpMessage);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /format
        this.bot.onText(/\/format/, async (msg) => {
            const chatId = msg.chat.id;
            const formatMessage = `
üìù –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞:

üéØ –û–°–ù–û–í–ù–û–ï –ü–†–ê–í–ò–õ–û:
–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü–ï–†–í–´–ú, –∑–∞—Ç–µ–º –¥–∞—Ç–∞, –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–´:
‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
‚Ä¢ "–ò–º—è –¥–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö)
‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞" (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)

üìÖ –§–û–†–ú–ê–¢–´ –î–ê–¢:

–ß–∏—Å–ª–æ–≤—ã–µ (—Å –≥–æ–¥–æ–º):
‚Ä¢ 15.03.1990
‚Ä¢ 15/03/1990  
‚Ä¢ 15-03-1990
‚Ä¢ 03.15.1990

–ß–∏—Å–ª–æ–≤—ã–µ (–±–µ–∑ –≥–æ–¥–∞):
‚Ä¢ 15.03 (–≥–æ–¥ = —Ç–µ–∫—É—â–∏–π)
‚Ä¢ 15/03
‚Ä¢ 15-03

–¢–µ–∫—Å—Ç–æ–≤—ã–µ:
‚Ä¢ 3 –º–∞—Ä—Ç–∞
‚Ä¢ 3 –º–∞—Ä—Ç–∞ 1990
‚Ä¢ –º–∞—Ä—Ç–∞ 3
‚Ä¢ –º–∞—Ä—Ç–∞ 3 1990

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è" (–¥–∞—Ç–∞ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º)
‚Ä¢ "–ú–∞—Ä–∏—è 20" (–Ω–µ–ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞)
‚Ä¢ "20.12 –ú–∞—Ä–∏—è" (–¥–∞—Ç–∞ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º)

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è"
‚Ä¢ "–ú–∞—Ä–∏—è 20.12.1990"
‚Ä¢ "–ú–∞—Ä–∏—è, 3 –º–∞—Ä—Ç–∞, –º–æ—è —Å–µ—Å—Ç—Ä–∞"
            `;
            await this.bot.sendMessage(chatId, formatMessage);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /example
        this.bot.onText(/\/example/, async (msg) => {
            const chatId = msg.chat.id;
            const exampleMessage = `
üìã –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:

üë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è:
‚Ä¢ "–ú–∞–º–∞, 15 –º–∞—Ä—Ç–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã"
‚Ä¢ "–ü–∞–ø–∞, 20.12.1965, –≤–æ–¥–∏—Ç–µ–ª—å"
‚Ä¢ "–ë–∞–±—É—à–∫–∞, 3 —è–Ω–≤–∞—Ä—è, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞"

üë• –î—Ä—É–∑—å—è:
‚Ä¢ "–ê–Ω–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞"
‚Ä¢ "–°–µ—Ä–≥–µ–π, 25.07.1990, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫"
‚Ä¢ "–û–ª—è, 8 —Å–µ–Ω—Ç—è–±—Ä—è, –∫–æ–ª–ª–µ–≥–∞"

üíº –†–∞–±–æ—Ç–∞:
‚Ä¢ "–ù–∞—á–∞–ª—å–Ω–∏–∫, 10 –º–∞—è, –¥–∏—Ä–µ–∫—Ç–æ—Ä"
‚Ä¢ "–ö–æ–ª–ª–µ–≥–∞, 30.11.1985, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
‚Ä¢ "–ö–ª–∏–µ–Ω—Ç, 22 –∞–ø—Ä–µ–ª—è, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å"

üéÇ –î–µ—Ç–∏:
‚Ä¢ "–°—ã–Ω, 5 –∏—é–Ω—è, —à–∫–æ–ª—å–Ω–∏–∫"
‚Ä¢ "–î–æ—á—å, 12.10.2010, –ª—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å"
‚Ä¢ "–ü–ª–µ–º—è–Ω–Ω–∏–∫, 18 –∞–≤–≥—É—Å—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç"

üí° –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!
            `;
            await this.bot.sendMessage(chatId, exampleMessage);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_reminder (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
        this.bot.onText(/\/test_reminder/, async (msg) => {
            const chatId = msg.chat.id;
            await this.bot.sendMessage(chatId, 'üîç –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
            
            try {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Ä—É—á–Ω—É—é
                await this.birthdayReminder.checkAndSendReminders();
                await this.bot.sendMessage(chatId, '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ï—Å–ª–∏ –µ—Å—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
            } catch (error) {
                console.error('Error in test reminder:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å cron-–∑–∞–¥–∞—á)
        this.bot.onText(/\/status/, async (msg) => {
            const chatId = msg.chat.id;
            await this.showStatus(chatId);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
        this.bot.on('callback_query', async (callbackQuery) => {
            const chatId = callbackQuery.message.chat.id;
            const data = callbackQuery.data;
            const messageId = callbackQuery.message.message_id;

            try {
                switch (data) {
                    case 'list':
                        await this.showBirthdayList(chatId);
                        break;
                    case 'example':
                        await this.showExamples(chatId);
                        break;
                    case 'help':
                        await this.showHelp(chatId);
                        break;
                    case 'status':
                        await this.showStatus(chatId);
                        break;
                    case 'test_reminder':
                        await this.testReminder(chatId);
                        break;
                    case 'format':
                        await this.showFormat(chatId);
                        break;
                    case 'main_menu':
                        await this.showMainMenu(chatId);
                        break;
                    default:
                        await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' });
                        return;
                }
                
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
                await this.bot.answerCallbackQuery(callbackQuery.id);
                
            } catch (error) {
                console.error('Error handling callback query:', error);
                await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
            }
        });
    }

    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;
        const username = msg.from.username || msg.from.first_name || 'Unknown';

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log(`üì± Message from @${username} (${chatId}): ${text}`);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (text.startsWith('/')) {
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.checkTodayBirthdays(chatId);

        try {
            const parsedData = this.messageParser.parseMessage(text);
            
            if (parsedData.error) {
                await this.bot.sendMessage(chatId, `‚ùå ${parsedData.error}`);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const birthdayId = await this.db.addBirthday(
                chatId,
                parsedData.name,
                parsedData.date,
                parsedData.info
            );

            if (birthdayId) {
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                console.log(`üéÇ Added birthday: ${parsedData.name} (${parsedData.originalDate}) for @${username} (${chatId})`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
                const today = new Date();
                const month = today.getMonth() + 1;
                const day = today.getDate();
                
                const addedBirthday = new Date(parsedData.date);
                const addedMonth = addedBirthday.getMonth() + 1;
                const addedDay = addedBirthday.getDate();
                
                if (month === addedMonth && day === addedDay) {
                    // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                    console.log(`üéâ Instant birthday notification sent to @${username} for ${parsedData.name}`);
                    await this.sendInstantBirthdayMessage(chatId, {
                        name: parsedData.name,
                        info: parsedData.info || ''
                    });
                } else {
                    // –û–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    const confirmationMessage = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${parsedData.name} (${parsedData.originalDate}). –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º! üéÇ`;
                    
                    const keyboard = {
                        inline_keyboard: [
                            [
                                { text: 'üìã –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' },
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]
                        ]
                    };
                    
                    await this.bot.sendMessage(chatId, confirmationMessage, { reply_markup: keyboard });
                }
            } else {
                console.log(`‚ùå Failed to add birthday for @${username}: ${parsedData.name}`);
                await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
            }

        } catch (error) {
            console.error('Error handling message:', error);
            await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    }

    async checkTodayBirthdays(chatId) {
        try {
            const today = new Date();
            const month = today.getMonth() + 1;
            const day = today.getDate();

            console.log(`Checking today's birthdays for chat ${chatId}: ${day}.${month}`);

            const birthdays = await this.db.getBirthdaysByDate(month, day);
            
            if (birthdays.length === 0) {
                return; // –ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userBirthdays = birthdays.filter(birthday => birthday.chat_id === chatId);
            
            if (userBirthdays.length === 0) {
                return; // –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            }

            console.log(`Found ${userBirthdays.length} birthdays today for chat ${chatId}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
            for (const birthday of userBirthdays) {
                await this.sendInstantBirthdayMessage(chatId, birthday);
            }

        } catch (error) {
            console.error('Error checking today birthdays:', error);
        }
    }

    async sendInstantBirthdayMessage(chatId, birthday) {
        try {
            const name = birthday.name;
            const info = birthday.info || '';

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞
            const congratulations = await this.aiAssistant.generateCongratulations(name, info);
            const giftIdea = await this.aiAssistant.generateGiftIdea(name, info);

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const combinedMessage = this.createCombinedMessage(name, congratulations, giftIdea);
            await this.bot.sendMessage(chatId, combinedMessage);

        } catch (error) {
            console.error('Error sending instant birthday message:', error);
        }
    }

    createCombinedMessage(name, congratulations, giftIdea) {
        let message = `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${name}!\n\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
        if (congratulations) {
            message += `üíå ${congratulations}\n\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞
        if (giftIdea) {
            message += `üéÅ ${giftIdea}`;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤
        if (message.length > 400) {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–æ–∫—Ä–∞—â–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–¥–µ—é –ø–æ–¥–∞—Ä–∫–∞
            const baseMessage = `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${name}!\n\n`;
            const availableSpace = 400 - baseMessage.length;
            
            let congratulationsText = '';
            let giftIdeaText = '';
            
            if (congratulations && giftIdea) {
                // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –∏–¥–µ–µ–π –ø–æ–¥–∞—Ä–∫–∞
                const spacePerPart = Math.floor(availableSpace / 2) - 10; // 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–º–æ–¥–∑–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
                
                congratulationsText = congratulations.length > spacePerPart 
                    ? congratulations.substring(0, spacePerPart - 3) + '...'
                    : congratulations;
                    
                giftIdeaText = giftIdea.length > spacePerPart 
                    ? giftIdea.substring(0, spacePerPart - 3) + '...'
                    : giftIdea;
                    
                message = `${baseMessage}üíå ${congratulationsText}\n\nüéÅ ${giftIdeaText}`;
            } else if (congratulations) {
                congratulationsText = congratulations.length > availableSpace - 5
                    ? congratulations.substring(0, availableSpace - 8) + '...'
                    : congratulations;
                message = `${baseMessage}üíå ${congratulationsText}`;
            } else if (giftIdea) {
                giftIdeaText = giftIdea.length > availableSpace - 5
                    ? giftIdea.substring(0, availableSpace - 8) + '...'
                    : giftIdea;
                message = `${baseMessage}üéÅ ${giftIdeaText}`;
            }
        }
        
        return message;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥
    async showMainMenu(chatId) {
        const welcomeMessage = `
üéâ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
        `;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìã –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' },
                    { text: 'üìù –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' }
                ],
                [
                    { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
                    { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'status' }
                ],
                [
                    { text: 'üß™ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'test_reminder' }
                ]
            ]
        };
        
        await this.bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
    }

    async showExamples(chatId) {
        const exampleMessage = `
üìã –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:

üë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è:
‚Ä¢ "–ú–∞–º–∞, 15 –º–∞—Ä—Ç–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã"
‚Ä¢ "–ü–∞–ø–∞, 20.12.1965, –≤–æ–¥–∏—Ç–µ–ª—å"
‚Ä¢ "–ë–∞–±—É—à–∫–∞, 3 —è–Ω–≤–∞—Ä—è, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞"

üë• –î—Ä—É–∑—å—è:
‚Ä¢ "–ê–Ω–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞"
‚Ä¢ "–°–µ—Ä–≥–µ–π, 25.07.1990, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫"
‚Ä¢ "–û–ª—è, 8 —Å–µ–Ω—Ç—è–±—Ä—è, –∫–æ–ª–ª–µ–≥–∞"

üíº –†–∞–±–æ—Ç–∞:
‚Ä¢ "–ù–∞—á–∞–ª—å–Ω–∏–∫, 10 –º–∞—è, –¥–∏—Ä–µ–∫—Ç–æ—Ä"
‚Ä¢ "–ö–æ–ª–ª–µ–≥–∞, 30.11.1985, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
‚Ä¢ "–ö–ª–∏–µ–Ω—Ç, 22 –∞–ø—Ä–µ–ª—è, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å"

üéÇ –î–µ—Ç–∏:
‚Ä¢ "–°—ã–Ω, 5 –∏—é–Ω—è, —à–∫–æ–ª—å–Ω–∏–∫"
‚Ä¢ "–î–æ—á—å, 12.10.2010, –ª—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å"
‚Ä¢ "–ü–ª–µ–º—è–Ω–Ω–∏–∫, 18 –∞–≤–≥—É—Å—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç"

üí° –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!
        `;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã', callback_data: 'format' },
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        };
        
        await this.bot.sendMessage(chatId, exampleMessage, { reply_markup: keyboard });
    }

    async showHelp(chatId) {
        const helpMessage = `
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
/format - –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞
/example - –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
/test_reminder - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
"–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞"
‚Ä¢ "–ü–µ—Ç—Ä, 03.07.1992, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
‚Ä¢ "–ï–ª–µ–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ø–æ–¥—Ä—É–≥–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã"

üìÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç:
‚Ä¢ 15.03.1990 (—á–∏—Å–ª–æ–≤–æ–π)
‚Ä¢ 3 –º–∞—Ä—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
‚Ä¢ 15 –º–∞—è 1990
‚Ä¢ –º–∞—Ä—Ç–∞ 3

‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è, –º–æ—è –º–∞–º–∞"
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞"
        `;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìù –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã', callback_data: 'format' },
                    { text: 'üìã –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' }
                ],
                [
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        };
        
        await this.bot.sendMessage(chatId, helpMessage, { reply_markup: keyboard });
    }

    async showFormat(chatId) {
        const formatMessage = `
üìù –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞:

üéØ –û–°–ù–û–í–ù–û–ï –ü–†–ê–í–ò–õ–û:
–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ü–ï–†–í–´–ú, –∑–∞—Ç–µ–º –¥–∞—Ç–∞, –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–´:
‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
‚Ä¢ "–ò–º—è –¥–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö)
‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞" (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)

üìÖ –§–û–†–ú–ê–¢–´ –î–ê–¢:

–ß–∏—Å–ª–æ–≤—ã–µ (—Å –≥–æ–¥–æ–º):
‚Ä¢ 15.03.1990
‚Ä¢ 15/03/1990  
‚Ä¢ 15-03-1990
‚Ä¢ 03.15.1990

–ß–∏—Å–ª–æ–≤—ã–µ (–±–µ–∑ –≥–æ–¥–∞):
‚Ä¢ 15.03 (–≥–æ–¥ = —Ç–µ–∫—É—â–∏–π)
‚Ä¢ 15/03
‚Ä¢ 15-03

–¢–µ–∫—Å—Ç–æ–≤—ã–µ:
‚Ä¢ 3 –º–∞—Ä—Ç–∞
‚Ä¢ 3 –º–∞—Ä—Ç–∞ 1990
‚Ä¢ –º–∞—Ä—Ç–∞ 3
‚Ä¢ –º–∞—Ä—Ç–∞ 3 1990

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è" (–¥–∞—Ç–∞ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º)
‚Ä¢ "–ú–∞—Ä–∏—è 20" (–Ω–µ–ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞)
‚Ä¢ "20.12 –ú–∞—Ä–∏—è" (–¥–∞—Ç–∞ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º)

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è"
‚Ä¢ "–ú–∞—Ä–∏—è 20.12.1990"
‚Ä¢ "–ú–∞—Ä–∏—è, 3 –º–∞—Ä—Ç–∞, –º–æ—è —Å–µ—Å—Ç—Ä–∞"
        `;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìã –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' },
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        };
        
        await this.bot.sendMessage(chatId, formatMessage, { reply_markup: keyboard });
    }

    async showStatus(chatId) {
        const now = moment().format('DD.MM.YYYY HH:mm:ss');
        const nextReminder = '09:00 –ø–æ –ú–°–ö –≤—Ä–µ–º–µ–Ω–∏';
        
        const statusMessage = `
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:

‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now}
üîî –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${nextReminder}
ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚úÖ
üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ

üéØ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.

üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /test_reminder
        `;
        
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üß™ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'test_reminder' },
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]
            ]
        };
        
        await this.bot.sendMessage(chatId, statusMessage, { reply_markup: keyboard });
    }

    async testReminder(chatId) {
        await this.bot.sendMessage(chatId, 'üîç –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
        
        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Ä—É—á–Ω—É—é
            await this.birthdayReminder.checkAndSendReminders();
            await this.bot.sendMessage(chatId, '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ï—Å–ª–∏ –µ—Å—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
        } catch (error) {
            console.error('Error in test reminder:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
        }
    }

    async showBirthdayList(chatId) {
        try {
            const birthdays = await this.db.getBirthdaysByChatId(chatId);
            
            if (birthdays.length === 0) {
                const emptyMessage = 'üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.';
                const keyboard = {
                    inline_keyboard: [
                        [
                            { text: 'üìù –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' },
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                        ]
                    ]
                };
                await this.bot.sendMessage(chatId, emptyMessage, { reply_markup: keyboard });
                return;
            }

            let message = 'üìÖ –í–∞—à–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n';
            birthdays.forEach((birthday, index) => {
                const nextBirthday = this.birthdayReminder.getNextBirthday(birthday.birth_date);
                const daysUntil = this.birthdayReminder.getDaysUntilBirthday(nextBirthday);
                
                message += `${index + 1}. ${birthday.name} - ${birthday.birth_date}`;
                if (birthday.info) {
                    message += ` (${birthday.info})`;
                }
                message += `\n   üìÖ –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${nextBirthday.format('DD.MM.YYYY')}`;
                message += `\n   ‚è∞ –ß–µ—Ä–µ–∑ ${daysUntil} –¥–Ω–µ–π\n\n`;
            });

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'list' },
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                    ]
                ]
            };

            await this.bot.sendMessage(chatId, message, { reply_markup: keyboard });
        } catch (error) {
            console.error('Error showing birthday list:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.');
        }
    }

    setupCronJobs() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
        cron.schedule('0 9 * * *', async () => {
            console.log('Checking for birthdays...');
            await this.birthdayReminder.checkAndSendReminders();
        });

        console.log('Cron jobs set up successfully');
    }

    setupHttpServer() {
        const port = process.env.PORT || 3000;
        
        const server = http.createServer((req, res) => {
            if (req.url === '/' && req.method === 'GET') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ 
                    status: 'ok', 
                    message: 'Birthday Bot is running',
                    timestamp: new Date().toISOString()
                }));
            } else if (req.url === '/health' && req.method === 'GET') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ 
                    status: 'healthy',
                    uptime: process.uptime(),
                    timestamp: new Date().toISOString()
                }));
            } else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ error: 'Not found' }));
            }
        });

        server.listen(port, () => {
            console.log(`HTTP server running on port ${port}`);
        });

        this.httpServer = server;
    }

    setupCronJobs() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        cron.schedule('0 9 * * *', async () => {
            console.log('üîî Cron: Checking birthdays at 09:00 MSK...');
            await this.birthdayReminder.checkAndSendReminders();
        }, {
            scheduled: true,
            timezone: "Europe/Moscow"
        });
        
        console.log('‚úÖ Cron jobs set up successfully - daily reminders at 09:00 MSK');
    }

    async start() {
        try {
            await this.db.init();
            console.log('Birthday Bot started successfully!');
        } catch (error) {
            console.error('Failed to start bot:', error);
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
const bot = new BirthdayBot();
bot.start();
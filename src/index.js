import TelegramBot from 'node-telegram-bot-api'; import cron from 'node-cron'; import dotenv from 'dotenv'; import moment from 'moment'; import http from 'http'; import { SupabaseDatabase } from './database.js'; import { MessageParser } from './messageParser.js'; import { BirthdayReminder } from './birthdayReminder.js'; import { AIAssistant } from './aiAssistant.js'; import { SecurityUtils } from './security.js'; // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è dotenv.config(); class BirthdayBot { constructor() { this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true }); this.db = new SupabaseDatabase(); this.messageParser = new MessageParser(); this.birthdayReminder = new BirthdayReminder(this.bot, this.db); this.aiAssistant = new AIAssistant(); this.security = new SecurityUtils(); // –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ this.userRequests = new Map(); // chatId -> { count, resetTime } this.RATE_LIMIT = 10; // –º–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É this.RATE_WINDOW = 60 * 1000; // –æ–∫–Ω–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞) this.MAX_MESSAGE_LENGTH = 1000; // –º–∞–∫—Å–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ this.MAX_BIRTHDAYS_PER_USER = 100; // –º–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è // –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π this.sentReminders = new Map(); // chatId -> { date, sent: boolean } // –ö—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–∑—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏) this.userCache = new Map(); // chatId -> { lastUpdate, userData } this.USER_CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç // –ö—ç—à –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è this.birthdayCountCache = new Map(); // chatId -> { count, lastUpdate } this.BIRTHDAY_CACHE_TTL = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã // –†–µ–∂–∏–º –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ –¥–ª—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ this.customGiftInput = new Map(); // chatId -> { name, info } this.setupHandlers(); this.setupCronJobs(); this.setupHttpServer(); } setupHandlers() { // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π this.bot.on('message', async (msg) => { if (msg.text) { await this.handleMessage(msg); } }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start this.bot.onText(/\/start/, async (msg) => { const chatId = msg.chat.id; // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start await this.clearEditingMode(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ await this.saveUserInfo(msg.from); const welcomeMessage = ` –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ" –ù–∞–ø—Ä–∏–º–µ—Ä: "–ê–Ω–Ω–∞, 3 –º–∞—Ä—Ç–∞, –º–æ—è —Å–µ—Å—Ç—Ä–∞, –ª—é–±–∏—Ç –∫–Ω–∏–≥–∏" "–ü–µ—Ç—Ä, 15.05.1990, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" "3 –º–∞—Ä—Ç–∞, –ê–Ω–Ω–∞, –º–æ—è —Å–µ—Å—Ç—Ä–∞" (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ) –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∏–¥–µ–∏ –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø–æ–¥–∞—Ä–∫–æ–≤! –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ! `; const keyboard = { inline_keyboard: [ [ { text: '–ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: '–ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' } ], [ { text: '–ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤', callback_data: 'gifts' }, { text: '–ü–æ–º–æ—â—å', callback_data: 'help' } ], [ { text: '–°—Ç–∞—Ç—É—Å', callback_data: 'status' }, { text: '–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'test_reminder' } ], [ { text: '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', callback_data: 'commands' } ] ] }; await this.bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard }); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list this.bot.onText(/\/list/, async (msg) => { const chatId = msg.chat.id; await this.showBirthdayList(chatId); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help this.bot.onText(/\/help/, async (msg) => { const chatId = msg.chat.id; const helpMessage = ` –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è /delete - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è /format - –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞ /example - –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è /test_reminder - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: "–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏–ª–∏ "–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –ò–º—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –ü—Ä–∏–º–µ—Ä—ã (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç): ‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "–ü–µ—Ç—Ä, 03.07.1992, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" ‚Ä¢ "03.07.1992, –ü–µ—Ç—Ä, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" ‚Ä¢ "–ï–ª–µ–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ø–æ–¥—Ä—É–≥–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã" ‚Ä¢ "14 —Ñ–µ–≤—Ä–∞–ª—è, –ï–ª–µ–Ω–∞, –ø–æ–¥—Ä—É–≥–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã" –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç: ‚Ä¢ 15.03.1990 (—á–∏—Å–ª–æ–≤–æ–π) ‚Ä¢ 3 –º–∞—Ä—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π) ‚Ä¢ 15 –º–∞—è 1990 ‚Ä¢ –º–∞—Ä—Ç–∞ 3 –ì–∏–±–∫–∏–π –ø–æ—Ä—è–¥–æ–∫: –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –∏–º–µ–Ω–∏ –∏–ª–∏ —Å –¥–∞—Ç—ã! `; await this.bot.sendMessage(chatId, helpMessage); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /format this.bot.onText(/\/format/, async (msg) => { const chatId = msg.chat.id; const formatMessage = ` –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞: –ì–ò–ë–ö–ò–ô –§–û–†–ú–ê–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ! –ü–†–ê–í–ò–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–´: ‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" ‚Ä¢ "–î–∞—Ç–∞, –∏–º—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" ‚Ä¢ "–ò–º—è –¥–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö) ‚Ä¢ "–î–∞—Ç–∞ –∏–º—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö) ‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞" (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏) –§–û–†–ú–ê–¢–´ –î–ê–¢: –ß–∏—Å–ª–æ–≤—ã–µ (—Å –≥–æ–¥–æ–º): ‚Ä¢ 15.03.1990 ‚Ä¢ 15/03/1990 ‚Ä¢ 15-03-1990 ‚Ä¢ 03.15.1990 –ß–∏—Å–ª–æ–≤—ã–µ (–±–µ–∑ –≥–æ–¥–∞): ‚Ä¢ 15.03 (–≥–æ–¥ = —Ç–µ–∫—É—â–∏–π) ‚Ä¢ 15/03 ‚Ä¢ 15-03 –¢–µ–∫—Å—Ç–æ–≤—ã–µ: ‚Ä¢ 3 –º–∞—Ä—Ç–∞ ‚Ä¢ 3 –º–∞—Ä—Ç–∞ 1990 ‚Ä¢ –º–∞—Ä—Ç–∞ 3 ‚Ä¢ –º–∞—Ä—Ç–∞ 3 1990 –í–°–ï –†–ê–ë–û–¢–ê–Æ–¢: ‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "–ú–∞—Ä–∏—è 20.12.1990" ‚Ä¢ "20.12.1990 –ú–∞—Ä–∏—è" `; await this.bot.sendMessage(chatId, formatMessage); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /example this.bot.onText(/\/example/, async (msg) => { const chatId = msg.chat.id; const exampleMessage = ` –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: üë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è: ‚Ä¢ "–ú–∞–º–∞, 15 –º–∞—Ä—Ç–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã" ‚Ä¢ "–ü–∞–ø–∞, 20.12.1965, –≤–æ–¥–∏—Ç–µ–ª—å" ‚Ä¢ "–ë–∞–±—É—à–∫–∞, 3 —è–Ω–≤–∞—Ä—è, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞" –î—Ä—É–∑—å—è: ‚Ä¢ "–ê–Ω–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞" ‚Ä¢ "–°–µ—Ä–≥–µ–π, 25.07.1990, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫" ‚Ä¢ "–û–ª—è, 8 —Å–µ–Ω—Ç—è–±—Ä—è, –∫–æ–ª–ª–µ–≥–∞" üíº –†–∞–±–æ—Ç–∞: ‚Ä¢ "–ù–∞—á–∞–ª—å–Ω–∏–∫, 10 –º–∞—è, –¥–∏—Ä–µ–∫—Ç–æ—Ä" ‚Ä¢ "–ö–æ–ª–ª–µ–≥–∞, 30.11.1985, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" ‚Ä¢ "–ö–ª–∏–µ–Ω—Ç, 22 –∞–ø—Ä–µ–ª—è, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å" –î–µ—Ç–∏: ‚Ä¢ "–°—ã–Ω, 5 –∏—é–Ω—è, —à–∫–æ–ª—å–Ω–∏–∫" ‚Ä¢ "–î–æ—á—å, 12.10.2010, –ª—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å" ‚Ä¢ "–ü–ª–µ–º—è–Ω–Ω–∏–∫, 18 –∞–≤–≥—É—Å—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç" –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ! `; await this.bot.sendMessage(chatId, exampleMessage); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_reminder (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π) this.bot.onText(/\/test_reminder/, async (msg) => { const chatId = msg.chat.id; await this.bot.sendMessage(chatId, 'üîç –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...'); try { // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Ä—É—á–Ω—É—é await this.checkAndSendRemindersWithTracking(); await this.bot.sendMessage(chatId, '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ï—Å–ª–∏ –µ—Å—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'); } catch (error) { console.error('Error in test reminder:', error); await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.'); } }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gifts (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤) this.bot.onText(/\/gifts/, async (msg) => { const chatId = msg.chat.id; await this.showGiftIdeasMenu(chatId); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å cron-–∑–∞–¥–∞—á) this.bot.onText(/\/status/, async (msg) => { const chatId = msg.chat.id; await this.showStatus(chatId); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) this.bot.onText(/\/stats/, async (msg) => { const chatId = msg.chat.id; await this.showStats(chatId); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è) this.bot.onText(/\/edit/, async (msg) => { const chatId = msg.chat.id; await this.showEditMenu(chatId); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete (—É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è) this.bot.onText(/\/delete/, async (msg) => { const chatId = msg.chat.id; await this.showDeleteMenu(chatId); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel (–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) this.bot.onText(/\/cancel/, async (msg) => { const chatId = msg.chat.id; await this.clearEditingMode(chatId, '–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ.'); const keyboard = { inline_keyboard: [ [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, ' –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: keyboard }); }); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ this.bot.on('callback_query', async (callbackQuery) => { const chatId = callbackQuery.message.chat.id; const data = callbackQuery.data; const messageId = callbackQuery.message.message_id; const username = callbackQuery.from.username || callbackQuery.from.first_name || 'Unknown'; // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤ if (this.isRateLimited(chatId)) { this.logSuspiciousActivity(chatId, username, 'CALLBACK_RATE_LIMIT_EXCEEDED', `Callback: ${data}`); await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤!' }); return; } // –í–∞–ª–∏–¥–∏—Ä—É–µ–º callback –¥–∞–Ω–Ω—ã–µ if (!this.validateCallbackData(data)) { this.logSuspiciousActivity(chatId, username, 'INVALID_CALLBACK_DATA', `Callback: ${data}`); await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!' }); return; } try { switch (data) { case 'list': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.'); await this.showBirthdayList(chatId); break; case 'example': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–∏–º–µ—Ä–æ–≤ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–∏–º–µ—Ä–æ–≤.'); await this.showExamples(chatId); break; case 'help': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ–º–æ—â–∏ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø—Ä–∞–≤–∫–µ.'); await this.showHelp(chatId); break; case 'status': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç—É—Å–∞ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç–∞—Ç—É—Å–∞.'); await this.showStatus(chatId); break; case 'test_reminder': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ await this.clearEditingMode(chatId, '–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.'); await this.testReminder(chatId); break; case 'gifts': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–¥–µ—è–º –ø–æ–¥–∞—Ä–∫–æ–≤.'); await this.showGiftIdeasMenu(chatId); break; case 'gifts_birthday': await this.generateGiftIdeas(chatId, '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', ''); break; case 'gifts_universal': await this.generateGiftIdeas(chatId, '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫', ''); break; case 'gifts_colleague': await this.generateGiftIdeas(chatId, '–∫–æ–ª–ª–µ–≥–∞', '—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–∏—Å–µ'); break; case 'gifts_family': await this.generateGiftIdeas(chatId, '—á–ª–µ–Ω —Å–µ–º—å–∏', '–±–ª–∏–∑–∫–∏–π —á–µ–ª–æ–≤–µ–∫'); break; case 'gifts_friend': await this.generateGiftIdeas(chatId, '–¥—Ä—É–≥', '—Ö–æ—Ä–æ—à–∏–π –¥—Ä—É–≥'); break; case 'gifts_child': await this.generateGiftIdeas(chatId, '—Ä–µ–±–µ–Ω–æ–∫', '–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–±–µ–Ω–æ–∫'); break; case 'gifts_custom': await this.showCustomGiftInput(chatId); break; case 'format': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ñ–æ—Ä–º–∞—Ç–æ–≤.'); await this.showFormat(chatId); break; case 'stats': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'); await this.showStats(chatId); break; case 'commands': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ–º–∞–Ω–¥ await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.'); await this.showCommands(chatId); break; case 'edit': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'); await this.showEditMenu(chatId); break; case 'delete': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è await this.clearEditingMode(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è.'); await this.showDeleteMenu(chatId); break; case 'main_menu': // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é await this.clearEditingMode(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.'); await this.showMainMenu(chatId); break; default: // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ ID if (data.startsWith('edit_')) { const birthdayId = data.replace('edit_', ''); await this.showEditForm(chatId, birthdayId); } else if (data.startsWith('delete_')) { const birthdayId = data.replace('delete_', ''); await this.deleteBirthday(chatId, birthdayId); } else if (data === 'edit') { // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è if (this.editingBirthday && this.editingBirthday[chatId]) { delete this.editingBirthday[chatId]; } await this.showEditMenu(chatId); } else { await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' }); return; } break; } // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback await this.bot.answerCallbackQuery(callbackQuery.id); } catch (error) { console.error('Error handling callback query:', error); await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' }); } }); } async handleMessage(msg) { const chatId = msg.chat.id; const text = msg.text; const username = msg.from.username || msg.from.first_name || 'Unknown'; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å if (this.security.isUserBlocked(chatId)) { this.security.logSecurityEvent(chatId, username, 'BLOCKED_USER_ATTEMPT', { message: text.substring(0, 100) }); return; } // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞—Ç–∞–∫–∏ const attackCheck = this.security.isAttack(text); if (attackCheck.isAttack) { this.security.logSecurityEvent(chatId, username, 'ATTACK_DETECTED', attackCheck); this.security.blockUser(chatId, `Attack detected: ${attackCheck.type}`); await this.bot.sendMessage(chatId, 'üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.'); return; } // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit if (this.isRateLimited(chatId)) { this.logSuspiciousActivity(chatId, username, 'RATE_LIMIT_EXCEEDED', `Message: ${text.substring(0, 100)}`); await this.bot.sendMessage(chatId, '‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.'); return; } // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç const sanitizedText = this.security.sanitizeText(text); // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ await this.saveUserInfo(msg.from); // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π if (process.env.NODE_ENV === 'development') { console.log(` Message from @${username} (${chatId}): ${sanitizedText}`); } // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ if (sanitizedText.startsWith('/')) { return; } // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è if (this.editingBirthday && this.editingBirthday[chatId]) { await this.handleEditBirthday(chatId, sanitizedText); return; } // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö if (this.customGiftInput && this.customGiftInput.has(chatId)) { await this.handleCustomGiftInput(chatId, sanitizedText); return; } // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã const validation = this.validateMessage(text); if (!validation.valid) { this.logSuspiciousActivity(chatId, username, 'INVALID_MESSAGE', validation.error); await this.bot.sendMessage(chatId, validation.error); return; } // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ cron-–∑–∞–¥–∞—á—É –≤ 09:00 try { const parsedData = this.messageParser.parseMessage(sanitizedText); if (parsedData.error) { await this.bot.sendMessage(chatId, ` ${parsedData.error}`); return; } // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º) const birthdayCount = await this.getBirthdayCount(chatId); if (birthdayCount >= this.MAX_BIRTHDAYS_PER_USER) { this.logSuspiciousActivity(chatId, username, 'BIRTHDAY_LIMIT_EXCEEDED', `Current count: ${birthdayCount}`); await this.bot.sendMessage(chatId, ` –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (${this.MAX_BIRTHDAYS_PER_USER}). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.`); return; } // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö const birthdayId = await this.db.addBirthday( chatId, parsedData.name, parsedData.date, parsedData.info ); if (birthdayId) { // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è if (process.env.NODE_ENV === 'development') { console.log(` Added birthday: ${parsedData.name} (${parsedData.originalDate}) for @${username} (${chatId})`); } // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è const cached = this.birthdayCountCache.get(chatId); if (cached) { cached.count += 1; cached.lastUpdate = Date.now(); this.birthdayCountCache.set(chatId, cached); } // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º const today = new Date(); const month = today.getMonth() + 1; const day = today.getDate(); const addedBirthday = new Date(parsedData.date); const addedMonth = addedBirthday.getMonth() + 1; const addedDay = addedBirthday.getDate(); if (month === addedMonth && day === addedDay) { // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ if (process.env.NODE_ENV === 'development') { console.log(` Instant birthday notification sent to @${username} for ${parsedData.name}`); } // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ this.sendInstantBirthdayMessage(chatId, { name: parsedData.name, info: parsedData.info || '' }).catch(error => { console.error('Error sending instant birthday message:', error); }); } else { // –û–±—ã—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ const confirmationMessage = ` –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è ${parsedData.name} (${parsedData.originalDate}). –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º! `; const keyboard = { inline_keyboard: [ [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, confirmationMessage, { reply_markup: keyboard }); } } else { if (process.env.NODE_ENV === 'development') { console.log(` Failed to add birthday for @${username}: ${parsedData.name}`); } await this.bot.sendMessage(chatId, ' –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.'); } } catch (error) { console.error('Error handling message:', error); await this.bot.sendMessage(chatId, ' –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.'); } } async checkTodayBirthdays(chatId) { try { const today = new Date(); const todayString = today.toDateString(); // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è const reminderData = this.sentReminders.get(chatId); if (reminderData && reminderData.date === todayString && reminderData.sent) { return; // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è } const month = today.getMonth() + 1; const day = today.getDate(); if (process.env.NODE_ENV === 'development') { console.log(`Checking today's birthdays for chat ${chatId}: ${day}.${month}`); } const birthdays = await this.db.getBirthdaysByDate(month, day); if (birthdays.length === 0) { // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ—Ç this.sentReminders.set(chatId, { date: todayString, sent: false }); return; // –ù–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è } // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è const userBirthdays = birthdays.filter(birthday => birthday.chat_id === chatId); if (userBirthdays.length === 0) { // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –¥–∞–∂–µ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è this.sentReminders.set(chatId, { date: todayString, sent: false }); return; // –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è } if (process.env.NODE_ENV === 'development') { console.log(`Found ${userBirthdays.length} birthdays today for chat ${chatId}`); } // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è for (const birthday of userBirthdays) { await this.sendInstantBirthdayMessage(chatId, birthday); } // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è this.sentReminders.set(chatId, { date: todayString, sent: true }); } catch (error) { console.error('Error checking today birthdays:', error); } } async sendInstantBirthdayMessage(chatId, birthday) { try { const name = birthday.name; const info = birthday.info || ''; // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ const quickMessage = ` –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${name}!\n\n –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è...`; await this.bot.sendMessage(chatId, quickMessage); // –ó–∞—Ç–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç this.generateAndSendPersonalizedContent(chatId, name, info).catch(error => { console.error('Error generating personalized content:', error); }); } catch (error) { console.error('Error sending instant birthday message:', error); } } async generateAndSendPersonalizedContent(chatId, name, info) { try { // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ const [congratulations, giftIdeas] = await Promise.all([ this.aiAssistant.generateCongratulations(name, info), this.aiAssistant.generateMultipleGiftIdeas(name, info, 3) ]); // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ const personalizedMessage = this.createCombinedMessage(name, congratulations, giftIdeas); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ await this.bot.sendMessage(chatId, personalizedMessage); } catch (error) { console.error('Error generating personalized content:', error); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ await this.bot.sendMessage(chatId, ` –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è ${name}:\n –¢–æ—Ä—Ç\n –ü–æ–¥–∞—Ä–æ–∫\n –¶–≤–µ—Ç—ã`); } } createCombinedMessage(name, congratulations, giftIdeas) { let message = ''; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ if (congratulations) { message += ` ${congratulations}`; } // –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ if (giftIdeas) { if (message) { message += '\n\n'; } message += ` –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:\n${giftIdeas}`; } // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ (—É–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–¥–µ–π) if (message.length > 500) { // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–æ–∫—Ä–∞—â–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ const availableSpace = 500; let congratulationsText = ''; let giftIdeasText = ''; if (congratulations && giftIdeas) { // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ: 40% –Ω–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, 60% –Ω–∞ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ const congratulationsSpace = Math.floor(availableSpace * 0.4) - 10; const giftIdeasSpace = Math.floor(availableSpace * 0.6) - 10; congratulationsText = congratulations.length > congratulationsSpace ? congratulations.substring(0, congratulationsSpace - 3) + '...' : congratulations; giftIdeasText = giftIdeas.length > giftIdeasSpace ? giftIdeas.substring(0, giftIdeasSpace - 3) + '...' : giftIdeas; message = ` ${congratulationsText}\n\n –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:\n${giftIdeasText}`; } else if (congratulations) { congratulationsText = congratulations.length > availableSpace - 5 ? congratulations.substring(0, availableSpace - 8) + '...' : congratulations; message = ` ${congratulationsText}`; } else if (giftIdeas) { giftIdeasText = giftIdeas.length > availableSpace - 5 ? giftIdeas.substring(0, availableSpace - 8) + '...' : giftIdeas; message = ` –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:\n${giftIdeasText}`; } } return message; } // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º async getBirthdayCount(chatId) { try { const now = Date.now(); const cached = this.birthdayCountCache.get(chatId); if (cached && (now - cached.lastUpdate) < this.BIRTHDAY_CACHE_TTL) { return cached.count; } const userBirthdays = await this.db.getBirthdaysByChatId(chatId); const count = userBirthdays.length; // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à this.birthdayCountCache.set(chatId, { count: count, lastUpdate: now }); return count; } catch (error) { console.error('Error getting birthday count:', error); return 0; } } // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º async saveUserInfo(user) { try { const chatId = user.id; const now = Date.now(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à const cached = this.userCache.get(chatId); if (cached && (now - cached.lastUpdate) < this.USER_CACHE_TTL) { // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫—ç—à–µ this.db.updateUserActivity(chatId).catch(error => { console.error('Error updating user activity:', error); }); return; } const username = user.username || null; const firstName = user.first_name || null; const lastName = user.last_name || null; const isBot = user.is_bot || false; const languageCode = user.language_code || null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö await this.db.upsertUser(chatId, username, firstName, lastName, isBot, languageCode); await this.db.updateUserActivity(chatId); // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à this.userCache.set(chatId, { lastUpdate: now, userData: { username, firstName, lastName, isBot, languageCode } }); } catch (error) { console.error('Error saving user info:', error); } } async handleEditBirthday(chatId, text) { try { const birthdayId = this.editingBirthday[chatId]; const parsedData = this.messageParser.parseMessage(text); if (parsedData.error) { const errorMessage = ` ${parsedData.error}\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`; const keyboard = { inline_keyboard: [ [ { text: ' –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'edit' }, { text: ' –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' } ], [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, errorMessage, { reply_markup: keyboard }); return; } // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è const updated = await this.db.updateBirthday( birthdayId, parsedData.name, parsedData.date, parsedData.info ); if (updated > 0) { const message = ` –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n –ò–º—è: ${parsedData.name}\n –î–∞—Ç–∞: ${new Date(parsedData.date).toLocaleDateString('ru-RU')}\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${parsedData.info || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.`; const keyboard = { inline_keyboard: [ [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: ' –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ', callback_data: 'edit' } ], [ { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è delete this.editingBirthday[chatId]; } else { const errorMessage = ` –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`; const keyboard = { inline_keyboard: [ [ { text: ' –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'edit' }, { text: ' –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' } ], [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, errorMessage, { reply_markup: keyboard }); } } catch (error) { console.error('Error handling edit birthday:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.'); } } // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º async clearEditingMode(chatId, reason = '') { if (this.editingBirthday && this.editingBirthday[chatId]) { delete this.editingBirthday[chatId]; if (reason) { await this.bot.sendMessage(chatId, ` –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω. ${reason}`); } } // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö if (this.customGiftInput && this.customGiftInput.has(chatId)) { this.customGiftInput.delete(chatId); } } // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit isRateLimited(chatId) { const now = Date.now(); const userData = this.userRequests.get(chatId); if (!userData) { this.userRequests.set(chatId, { count: 1, resetTime: now + this.RATE_WINDOW }); return false; } // –ï—Å–ª–∏ –æ–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ if (now > userData.resetTime) { this.userRequests.set(chatId, { count: 1, resetTime: now + this.RATE_WINDOW }); return false; } // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç if (userData.count >= this.RATE_LIMIT) { return true; } // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ userData.count++; this.userRequests.set(chatId, userData); return false; } // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è validateMessage(text) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è if (text.length > this.MAX_MESSAGE_LENGTH) { return { valid: false, error: ` –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º ${this.MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).` }; } // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã const suspiciousPatterns = [ /<script/i, /javascript:/i, /on\w+\s*=/i, /eval\s*\(/i, /function\s*\(/i ]; for (const pattern of suspiciousPatterns) { if (pattern.test(text)) { return { valid: false, error: ' –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.' }; } } // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞) const repeatedChars = /(.)\1{20,}/; if (repeatedChars.test(text)) { return { valid: false, error: ' –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤.' }; } return { valid: true }; } // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö sanitizeInput(input) { if (typeof input !== 'string') return input; return input .replace(/[<>\"'&]/g, '') // –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã .trim() .substring(0, this.MAX_MESSAGE_LENGTH); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É } // –ú–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ logSuspiciousActivity(chatId, username, activity, details = '') { const timestamp = new Date().toISOString(); console.log(` SUSPICIOUS ACTIVITY [${timestamp}]`); console.log(` Chat ID: ${chatId}`); console.log(` Username: @${username || 'unknown'}`); console.log(` Activity: ${activity}`); console.log(` Details: ${details}`); console.log('---'); } // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ callback –¥–∞–Ω–Ω—ã—Ö validateCallbackData(data) { // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ const allowedCallbacks = [ 'list', 'example', 'help', 'status', 'test_reminder', 'format', 'stats', 'edit', 'delete', 'main_menu', 'gifts', 'commands', 'gifts_birthday', 'gifts_universal', 'gifts_colleague', 'gifts_family', 'gifts_friend', 'gifts_child', 'gifts_custom' ]; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π callback if (allowedCallbacks.includes(data)) { return true; } // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è edit_ –∏ delete_ if (data.startsWith('edit_') || data.startsWith('delete_')) { const id = data.replace(/^(edit_|delete_)/, ''); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã return /^\d+$/.test(id); } return false; } // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ async showMainMenu(chatId) { const welcomeMessage = ` –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ: `; const keyboard = { inline_keyboard: [ [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: ' –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' } ], [ { text: ' –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤', callback_data: 'gifts' }, { text: ' –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit' } ], [ { text: ' –£–¥–∞–ª–∏—Ç—å', callback_data: 'delete' }, { text: ' –ü–æ–º–æ—â—å', callback_data: 'help' } ], [ { text: ' –°—Ç–∞—Ç—É—Å', callback_data: 'status' }, { text: ' –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' } ], [ { text: ' –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'test_reminder' }, { text: ' –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', callback_data: 'commands' } ] ] }; await this.bot.sendMessage(chatId, welcomeMessage, { reply_markup: keyboard }); } async showExamples(chatId) { const exampleMessage = ` –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: üë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è: ‚Ä¢ "–ú–∞–º–∞, 15 –º–∞—Ä—Ç–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã" ‚Ä¢ "–ü–∞–ø–∞, 20.12.1965, –≤–æ–¥–∏—Ç–µ–ª—å" ‚Ä¢ "–ë–∞–±—É—à–∫–∞, 3 —è–Ω–≤–∞—Ä—è, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–∫–∞" –î—Ä—É–∑—å—è: ‚Ä¢ "–ê–Ω–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞" ‚Ä¢ "–°–µ—Ä–≥–µ–π, 25.07.1990, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫" ‚Ä¢ "–û–ª—è, 8 —Å–µ–Ω—Ç—è–±—Ä—è, –∫–æ–ª–ª–µ–≥–∞" üíº –†–∞–±–æ—Ç–∞: ‚Ä¢ "–ù–∞—á–∞–ª—å–Ω–∏–∫, 10 –º–∞—è, –¥–∏—Ä–µ–∫—Ç–æ—Ä" ‚Ä¢ "–ö–æ–ª–ª–µ–≥–∞, 30.11.1985, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" ‚Ä¢ "–ö–ª–∏–µ–Ω—Ç, 22 –∞–ø—Ä–µ–ª—è, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å" –î–µ—Ç–∏: ‚Ä¢ "–°—ã–Ω, 5 –∏—é–Ω—è, —à–∫–æ–ª—å–Ω–∏–∫" ‚Ä¢ "–î–æ—á—å, 12.10.2010, –ª—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å" ‚Ä¢ "–ü–ª–µ–º—è–Ω–Ω–∏–∫, 18 –∞–≤–≥—É—Å—Ç–∞, —Å—Ç—É–¥–µ–Ω—Ç" –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ! `; const keyboard = { inline_keyboard: [ [ { text: ' –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã', callback_data: 'format' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, exampleMessage, { reply_markup: keyboard }); } async showHelp(chatId) { const helpMessage = ` –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ) /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è /delete - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è /gifts - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è /format - –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞ /example - –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è /test_reminder - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: "–ò–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏–ª–∏ "–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –ò–º—è, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –ü—Ä–∏–º–µ—Ä—ã (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç): ‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "–ü–µ—Ç—Ä, 03.07.1992, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" ‚Ä¢ "03.07.1992, –ü–µ—Ç—Ä, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" ‚Ä¢ "–ï–ª–µ–Ω–∞, 14 —Ñ–µ–≤—Ä–∞–ª—è, –ø–æ–¥—Ä—É–≥–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã" ‚Ä¢ "14 —Ñ–µ–≤—Ä–∞–ª—è, –ï–ª–µ–Ω–∞, –ø–æ–¥—Ä—É–≥–∞, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã" –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç: ‚Ä¢ 15.03.1990 (—á–∏—Å–ª–æ–≤–æ–π) ‚Ä¢ 3 –º–∞—Ä—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π) ‚Ä¢ 15 –º–∞—è 1990 ‚Ä¢ –º–∞—Ä—Ç–∞ 3 –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ ‚Ä¢ –ì–∏–±–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö `; const keyboard = { inline_keyboard: [ [ { text: ' –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã', callback_data: 'format' }, { text: ' –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' } ], [ { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, helpMessage, { reply_markup: keyboard }); } async showFormat(chatId) { const formatMessage = ` –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞: –ì–ò–ë–ö–ò–ô –§–û–†–ú–ê–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ! –ü–†–ê–í–ò–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–´: ‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" ‚Ä¢ "–î–∞—Ç–∞, –∏–º—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" ‚Ä¢ "–ò–º—è –¥–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö) ‚Ä¢ "–î–∞—Ç–∞ –∏–º—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" (–±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö) ‚Ä¢ "–ò–º—è, –¥–∞—Ç–∞" (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏) –§–û–†–ú–ê–¢–´ –î–ê–¢: –ß–∏—Å–ª–æ–≤—ã–µ (—Å –≥–æ–¥–æ–º): ‚Ä¢ 15.03.1990 ‚Ä¢ 15/03/1990 ‚Ä¢ 15-03-1990 ‚Ä¢ 03.15.1990 –ß–∏—Å–ª–æ–≤—ã–µ (–±–µ–∑ –≥–æ–¥–∞): ‚Ä¢ 15.03 (–≥–æ–¥ = —Ç–µ–∫—É—â–∏–π) ‚Ä¢ 15/03 ‚Ä¢ 15-03 –¢–µ–∫—Å—Ç–æ–≤—ã–µ: ‚Ä¢ 3 –º–∞—Ä—Ç–∞ ‚Ä¢ 3 –º–∞—Ä—Ç–∞ 1990 ‚Ä¢ –º–∞—Ä—Ç–∞ 3 ‚Ä¢ –º–∞—Ä—Ç–∞ 3 1990 –í–°–ï –†–ê–ë–û–¢–ê–Æ–¢: ‚Ä¢ "–ú–∞—Ä–∏—è, 20 –¥–µ–∫–∞–±—Ä—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "20 –¥–µ–∫–∞–±—Ä—è, –ú–∞—Ä–∏—è, –º–æ—è –º–∞–º–∞" ‚Ä¢ "–ú–∞—Ä–∏—è 20.12.1990" ‚Ä¢ "20.12.1990 –ú–∞—Ä–∏—è" `; const keyboard = { inline_keyboard: [ [ { text: ' –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, formatMessage, { reply_markup: keyboard }); } async showStatus(chatId) { const now = moment().format('DD.MM.YYYY HH:mm:ss'); const nextReminder = '09:00 –ø–æ –ú–°–ö –≤—Ä–µ–º–µ–Ω–∏'; const statusMessage = ` –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now} –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${nextReminder} ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /test_reminder `; const keyboard = { inline_keyboard: [ [ { text: ' –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', callback_data: 'test_reminder' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, statusMessage, { reply_markup: keyboard }); } async testReminder(chatId) { await this.bot.sendMessage(chatId, 'üîç –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...'); try { // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Ä—É—á–Ω—É—é await this.checkAndSendRemindersWithTracking(); await this.bot.sendMessage(chatId, '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ï—Å–ª–∏ –µ—Å—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.'); } catch (error) { console.error('Error in test reminder:', error); await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.'); } } async showStats(chatId) { try { const users = await this.db.getAllUsers(); const totalUsers = users.length; const activeUsers = users.filter(user => { const lastActivity = new Date(user.last_activity); const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000); return lastActivity > oneWeekAgo; }).length; const statsMessage = ` –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers} üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${activeUsers} –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${users.length > 0 ? new Date(users[0].last_activity).toLocaleString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'} üîù –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${users.slice(0, 5).map((user, index) => { const name = user.username ? `@${user.username}` : user.first_name || `ID: ${user.chat_id}`; const lastActivity = new Date(user.last_activity).toLocaleDateString('ru-RU'); return `${index + 1}. ${name} (${lastActivity})`; }).join('\n')} –ê–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏. `; const keyboard = { inline_keyboard: [ [ { text: ' –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'stats' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, statsMessage, { reply_markup: keyboard }); } catch (error) { console.error('Error showing stats:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'); } } async showCommands(chatId) { const commandsMessage = ` –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: üîß –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´: /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è /delete - –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ù–§–û–†–ú–ê–¶–ò–Ø: /format - –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º –≤–≤–æ–¥–∞ /example - –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è /commands - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: /gifts - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã /test_reminder - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –°–û–í–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É " –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥" –≤—ã—à–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å "/" –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ BotFather) `; const keyboard = { inline_keyboard: [ [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: ' –ü–æ–º–æ—â—å', callback_data: 'help' } ], [ { text: ' –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, commandsMessage, { reply_markup: keyboard }); } async showEditMenu(chatId) { try { const birthdays = await this.db.getBirthdaysByChatId(chatId); if (birthdays.length === 0) { const emptyMessage = ' –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'; const keyboard = { inline_keyboard: [ [ { text: ' –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'example' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, emptyMessage, { reply_markup: keyboard }); return; } let message = ' –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n'; const keyboard = { inline_keyboard: [] }; birthdays.forEach((birthday, index) => { const date = new Date(birthday.birth_date).toLocaleDateString('ru-RU'); const info = birthday.info ? ` (${birthday.info})` : ''; message += `${index + 1}. ${birthday.name} - ${date}${info}\n`; keyboard.inline_keyboard.push([ { text: ` ${birthday.name}`, callback_data: `edit_${birthday.id}` } ]); }); keyboard.inline_keyboard.push([ { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ]); await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); } catch (error) { console.error('Error showing edit menu:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'); } } async showDeleteMenu(chatId) { try { const birthdays = await this.db.getBirthdaysByChatId(chatId); if (birthdays.length === 0) { const emptyMessage = ' –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'; const keyboard = { inline_keyboard: [ [ { text: ' –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'example' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, emptyMessage, { reply_markup: keyboard }); return; } let message = ' –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n'; const keyboard = { inline_keyboard: [] }; birthdays.forEach((birthday, index) => { const date = new Date(birthday.birth_date).toLocaleDateString('ru-RU'); const info = birthday.info ? ` (${birthday.info})` : ''; message += `${index + 1}. ${birthday.name} - ${date}${info}\n`; keyboard.inline_keyboard.push([ { text: ` ${birthday.name}`, callback_data: `delete_${birthday.id}` } ]); }); keyboard.inline_keyboard.push([ { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ]); await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); } catch (error) { console.error('Error showing delete menu:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'); } } async showEditForm(chatId, birthdayId) { try { const birthday = await this.db.getBirthdayById(birthdayId); if (!birthday) { await this.bot.sendMessage(chatId, ' –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.'); return; } const date = new Date(birthday.birth_date).toLocaleDateString('ru-RU'); const message = ` –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: –ò–º—è: ${birthday.name} –î–∞—Ç–∞: ${date} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${birthday.info || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ù–æ–≤–æ–µ –∏–º—è, –Ω–æ–≤–∞—è –¥–∞—Ç–∞, –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –ü—Ä–∏–º–µ—Ä: "${birthday.name}, 15 –º–∞—Ä—Ç–∞ 1990, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" ‚è∞ –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω 5 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É. `; const keyboard = { inline_keyboard: [ [ { text: ' –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'edit' }, { text: ' –û—Ç–º–µ–Ω–∞', callback_data: 'main_menu' } ], [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è this.editingBirthday = this.editingBirthday || {}; this.editingBirthday[chatId] = birthdayId; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç) setTimeout(() => { if (this.editingBirthday && this.editingBirthday[chatId]) { delete this.editingBirthday[chatId]; this.bot.sendMessage(chatId, '‚è∞ –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit'); } }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç } catch (error) { console.error('Error showing edit form:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'); } } async deleteBirthday(chatId, birthdayId) { try { const birthday = await this.db.getBirthdayById(birthdayId); if (!birthday) { await this.bot.sendMessage(chatId, ' –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.'); return; } const success = await this.db.deleteBirthday(birthdayId); if (success) { const date = new Date(birthday.birth_date).toLocaleDateString('ru-RU'); const message = ` –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è "${birthday.name}" (${date}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`; const keyboard = { inline_keyboard: [ [ { text: ' –ú–æ–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'list' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); } else { await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.'); } } catch (error) { console.error('Error deleting birthday:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.'); } } async showBirthdayList(chatId) { try { const birthdays = await this.db.getBirthdaysByChatId(chatId); if (birthdays.length === 0) { const emptyMessage = ' –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.'; const keyboard = { inline_keyboard: [ [ { text: ' –ü—Ä–∏–º–µ—Ä—ã', callback_data: 'example' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, emptyMessage, { reply_markup: keyboard }); return; } // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è const sortedBirthdays = birthdays.map(birthday => { const nextBirthday = this.birthdayReminder.getNextBirthday(birthday.birth_date); const daysUntil = this.birthdayReminder.getDaysUntilBirthday(nextBirthday); return { ...birthday, nextBirthday, daysUntil }; }).sort((a, b) => { // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è (timestamp) return a.nextBirthday.valueOf() - b.nextBirthday.valueOf(); }); let message = ' –í–∞—à–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ):\n\n'; sortedBirthdays.forEach((birthday, index) => { message += `${index + 1}. ${birthday.name} - ${birthday.birth_date}`; if (birthday.info) { message += ` (${birthday.info})`; } message += `\n –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthday.nextBirthday.format('DD.MM.YYYY')}\n\n`; }); const keyboard = { inline_keyboard: [ [ { text: ' –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'list' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); } catch (error) { console.error('Error showing birthday list:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è.'); } } async showGiftIdeasMenu(chatId) { const message = ` –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –Ø –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ! –í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: `; const keyboard = { inline_keyboard: [ [ { text: ' –î–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data: 'gifts_birthday' }, { text: ' –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏', callback_data: 'gifts_universal' } ], [ { text: 'üë®‚Äçüíº –î–ª—è –∫–æ–ª–ª–µ–≥–∏', callback_data: 'gifts_colleague' }, { text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º—å–∏', callback_data: 'gifts_family' } ], [ { text: 'üë´ –î–ª—è –¥—Ä—É–≥–∞/–ø–æ–¥—Ä—É–≥–∏', callback_data: 'gifts_friend' }, { text: 'üë∂ –î–ª—è —Ä–µ–±–µ–Ω–∫–∞', callback_data: 'gifts_child' } ], [ { text: ' –í–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ', callback_data: 'gifts_custom' } ], [ { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); } async generateGiftIdeas(chatId, occasion, info) { try { await this.bot.sendMessage(chatId, ' –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤...'); const giftIdeas = await this.aiAssistant.generateMultipleGiftIdeas(occasion, info, 5); const message = ` –ò–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è ${occasion}:\n\n${giftIdeas}`; const keyboard = { inline_keyboard: [ [ { text: ' –î—Ä—É–≥–∏–µ –∏–¥–µ–∏', callback_data: 'gifts' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); } catch (error) { console.error('Error generating gift ideas:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤.'); } } async showCustomGiftInput(chatId) { const message = ` –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤ –§–æ—Ä–º–∞—Ç: –ò–º—è, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ü—Ä–∏–º–µ—Ä—ã: ‚Ä¢ "–ê–Ω–Ω–∞, –º–æ—è —Å–µ—Å—Ç—Ä–∞, –ª—é–±–∏—Ç —Ä–∏—Å–æ–≤–∞—Ç—å" ‚Ä¢ "–°–µ—Ä–≥–µ–π, –∫–æ–ª–ª–µ–≥–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —É–≤–ª–µ–∫–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º" ‚Ä¢ "–ú–∞–º–∞, 55 –ª–µ—Ç, –ª—é–±–∏—Ç —Ü–≤–µ—Ç—ã –∏ –∫–Ω–∏–≥–∏" –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–µ –±—É–¥—É—Ç –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤! `; const keyboard = { inline_keyboard: [ [ { text: ' –û—Ç–º–µ–Ω–∞', callback_data: 'gifts' } ] ] }; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∞—Ä–∫–∞—Ö this.customGiftInput.set(chatId, { step: 'name' }); await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); } async handleCustomGiftInput(chatId, text) { try { const inputData = this.customGiftInput.get(chatId); if (!inputData) { // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ this.customGiftInput.delete(chatId); return; } // –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é const parts = text.split(',').map(part => part.trim()); const name = parts[0]; const info = parts.slice(1).join(', '); if (!name || name.length < 2) { await this.bot.sendMessage(chatId, ' –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).'); return; } // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ await this.bot.sendMessage(chatId, ` –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è ${name}...`); const giftIdeas = await this.aiAssistant.generateMultipleGiftIdeas(name, info, 5); const message = ` –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è ${name}:\n\n${giftIdeas}`; const keyboard = { inline_keyboard: [ [ { text: ' –î—Ä—É–≥–∏–µ –∏–¥–µ–∏', callback_data: 'gifts_custom' }, { text: ' –í—Å–µ –∏–¥–µ–∏', callback_data: 'gifts' } ], [ { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' } ] ] }; await this.bot.sendMessage(chatId, message, { reply_markup: keyboard }); // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ this.customGiftInput.delete(chatId); } catch (error) { console.error('Error handling custom gift input:', error); await this.bot.sendMessage(chatId, ' –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤.'); // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ this.customGiftInput.delete(chatId); } } setupCronJobs() { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 cron.schedule('0 9 * * *', async () => { console.log('Checking for birthdays...'); await this.birthdayReminder.checkAndSendReminders(); }); console.log('Cron jobs set up successfully'); } setupHttpServer() { const port = process.env.PORT || 3000; const server = http.createServer((req, res) => { if (req.url === '/' && req.method === 'GET') { res.writeHead(200, { 'Content-Type': 'application/json' }); res.end(JSON.stringify({ status: 'ok', message: 'Birthday Bot is running', timestamp: new Date().toISOString() })); } else if (req.url === '/health' && req.method === 'GET') { res.writeHead(200, { 'Content-Type': 'application/json' }); res.end(JSON.stringify({ status: 'healthy', uptime: process.uptime(), timestamp: new Date().toISOString() })); } else { res.writeHead(404, { 'Content-Type': 'application/json' }); res.end(JSON.stringify({ error: 'Not found' })); } }); server.listen(port, () => { console.log(`HTTP server running on port ${port}`); }); this.httpServer = server; } setupCronJobs() { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ cron.schedule('0 9 * * *', async () => { console.log(' Cron: Checking birthdays at 09:00 MSK...'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π this.sentReminders.clear(); await this.checkAndSendRemindersWithTracking(); }, { scheduled: true, timezone: "Europe/Moscow" }); console.log(' Cron jobs set up successfully - daily reminders at 09:00 MSK'); } async checkAndSendRemindersWithTracking() { try { const today = new Date(); const month = today.getMonth() + 1; const day = today.getDate(); console.log(`Checking birthdays for ${day}.${month}`); const birthdays = await this.db.getBirthdaysByDate(month, day); if (birthdays.length === 0) { console.log('No birthdays today'); return; } console.log(`Found ${birthdays.length} birthdays today`); // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º const birthdaysByUser = {}; for (const birthday of birthdays) { if (!birthdaysByUser[birthday.chat_id]) { birthdaysByUser[birthday.chat_id] = []; } birthdaysByUser[birthday.chat_id].push(birthday); } // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é for (const [chatId, userBirthdays] of Object.entries(birthdaysByUser)) { for (const birthday of userBirthdays) { await this.sendInstantBirthdayMessage(chatId, birthday); } } } catch (error) { console.error('Error checking reminders:', error); } } async start() { try { await this.db.init(); console.log('Birthday Bot started successfully!'); } catch (error) { console.error('Failed to start bot:', error); process.exit(1); } } } // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ const bot = new BirthdayBot(); bot.start();
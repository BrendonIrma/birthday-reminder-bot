import dotenv from 'dotenv';
import { MessageParser } from './src/messageParser.js';

dotenv.config();

const parser = new MessageParser();

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ
const testMessages = [
    "–ê–Ω–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –º–∞—Ä—Ç–∞ –º–æ—è —Å–µ—Å—Ç—Ä–∞",
    "–ü–µ—Ç—Ä –¥–≤–∞–¥—Ü–∞—Ç–æ–≥–æ –¥–µ–∫–∞–±—Ä—è –∫–æ–ª–ª–µ–≥–∞"
];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö\n');

testMessages.forEach((message, index) => {
    console.log(`\n${index + 1}. –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    const words = message.split(/\s+/);
    console.log(`   –°–ª–æ–≤–∞: [${words.join(', ')}]`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    words.forEach((word, i) => {
        const isDate = parser.isDatePart(word);
        const isName = parser.isNamePart(word);
        console.log(`   –°–ª–æ–≤–æ ${i}: "${word}" - –¥–∞—Ç–∞: ${isDate}, –∏–º—è: ${isName}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    for (let i = 0; i < words.length - 1; i++) {
        const combined = words[i] + ' ' + words[i + 1];
        const isDate = parser.isDatePart(combined);
        console.log(`   –ö–æ–º–±–∏–Ω–∞—Ü–∏—è ${i}: "${combined}" - –¥–∞—Ç–∞: ${isDate}`);
    }
    
    const result = parser.parseMessage(message);
    if (result.error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
    } else {
        console.log(`   ‚úÖ –ò–º—è: ${result.name}`);
        console.log(`   ‚úÖ –î–∞—Ç–∞: ${result.originalDate}`);
        console.log(`   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${result.info || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
    }
});

console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');